familyCustomerID      <- trainChurnData.family$customerID
fliersCustomerID      <- trainChurnData.fliers$customerID
genzCustomerID        <- trainChurnData.genz$customerID
pioneerCustomerID     <- trainChurnData.pioneer$customerID
youngAdultsCustomerID <- trainChurnData.adults$customerID
trainChurnData.average$customerID <- NULL
trainChurnData.family$customerID  <- NULL
trainChurnData.fliers$customerID  <- NULL
trainChurnData.genz$customerID    <- NULL
trainChurnData.pioneer$customerID <- NULL
trainChurnData.adults$customerID  <- NULL
# over-sample using SMOTE
averageTrainChurnData     <- SMOTE(X=trainChurnData.average[, !names(trainChurnData.average) %in% c('Assigned.Bundle')], target=trainChurnData.average$Churn)$data
familyTrainChurnData      <- SMOTE(X=trainChurnData.family[, !names(trainChurnData.family) %in% c('Assigned.Bundle')], target=trainChurnData.family$Churn)$data
fliersTrainChurnData      <- SMOTE(X=trainChurnData.fliers[, !names(trainChurnData.fliers) %in% c('Assigned.Bundle')], target=trainChurnData.fliers$Churn)$data
genZTrainChurnData        <- SMOTE(X=trainChurnData.genz[, !names(trainChurnData.genz) %in% c('Assigned.Bundle')], target=trainChurnData.genz$Churn)$data
pioneerTrainChurnData     <- SMOTE(X=trainChurnData.pioneer[, !names(trainChurnData.pioneer) %in% c('Assigned.Bundle')], target=trainChurnData.pioneer$Churn)$data
youngAdultsTrainChurnData <- SMOTE(X=trainChurnData.adults[, !names(trainChurnData.adults) %in% c('Assigned.Bundle')], target=trainChurnData.adults$Churn)$data
# remove automatically-generated column "class" from SMOTE-ing
averageTrainChurnData$class     <- NULL
familyTrainChurnData$class      <- NULL
fliersTrainChurnData$class      <- NULL
genZTrainChurnData$class        <- NULL
pioneerTrainChurnData$class     <- NULL
youngAdultsTrainChurnData$class <- NULL
# Subset test set by Assigned.Bundle
averageTestChurnData     <- subset(testChurnData, Assigned.Bundle == "Average Bundle")
familyTestChurnData      <- subset(testChurnData, Assigned.Bundle == "Family Bundle")
fliersTestChurnData      <- subset(testChurnData, Assigned.Bundle == "Frequent Fliers")
genZTestChurnData        <- subset(testChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTestChurnData     <- subset(testChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTestChurnData <- subset(testChurnData, Assigned.Bundle == "Young Adults")
# Making Churn a Factor for RF
averageTrainChurnData$Churn     <- factor(averageTrainChurnData$Churn)
familyTrainChurnData$Churn      <- factor(familyTrainChurnData$Churn)
fliersTrainChurnData$Churn      <- factor(fliersTrainChurnData$Churn)
genZTrainChurnData$Churn        <- factor(genZTrainChurnData$Churn)
pioneerTrainChurnData$Churn     <- factor(pioneerTrainChurnData$Churn)
youngAdultsTrainChurnData$Churn <- factor(youngAdultsTrainChurnData$Churn)
averageTestChurnData$Churn      <- factor(averageTestChurnData$Churn)
familyTestChurnData$Churn       <- factor(familyTestChurnData$Churn)
fliersTestChurnData$Churn       <- factor(fliersTestChurnData$Churn)
genZTestChurnData$Churn         <- factor(genZTestChurnData$Churn)
pioneerTestChurnData$Churn      <- factor(pioneerTestChurnData$Churn)
youngAdultsTestChurnData$Churn  <- factor(youngAdultsTestChurnData$Churn)
cv <- cv.glmnet(x=as.matrix(averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')]), y=averageTrainChurnData$Churn, family='binomial', alpha=1)
model.average <- glmnet(x=averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')], y=averageTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.average)), as.vector(coef(model.average)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +---------------------+
# |    Family bundle    |
# +---------------------+
cv <- cv.glmnet(x=as.matrix(familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')]), y=familyTrainChurnData$Churn, family='binomial', alpha=1)
model.family <- glmnet(x=familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')], y=familyTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.family)), as.vector(coef(model.family)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
cv <- cv.glmnet(x=as.matrix(fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')]), y=fliersTrainChurnData$Churn, family='binomial', alpha=1)
model.fliers <- glmnet(x=fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')], y=fliersTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.fliers)), as.vector(coef(model.fliers)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
cv <- cv.glmnet(x=as.matrix(genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')]), y=genZTrainChurnData$Churn, family='binomial', alpha=1)
model.genz <- glmnet(x=genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')], y=genZTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.genz)), as.vector(coef(model.genz)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +--------------------------+
# |    Pioneer Generation    |
# +--------------------------+
cv <- cv.glmnet(x=as.matrix(pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')]), y=pioneerTrainChurnData$Churn, family='binomial', alpha=1)
model.pioneer <- glmnet(x=pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')], y=pioneerTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.pioneer)), as.vector(coef(model.pioneer)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-------------------+
# |   Young Adults    |
# +-------------------+
cv <- cv.glmnet(x=as.matrix(youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')]), y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1)
model.adults <- glmnet(x=youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')], y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.adults)), as.vector(coef(model.adults)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |   Model Evaluation    |
# +-----------------------+
threshold  <- 0.5
accuracies <- rep(0, 6)
models     <- c('Average Bundle',
'Family Bundle',
'Frequent Fliers',
'Gen Z Streamers',
'Pioneer',
'Young Adults')
averageTestChurnData$Assigned.Bundle     <- NULL
familyTestChurnData$Assigned.Bundle      <- NULL
fliersTestChurnData$Assigned.Bundle      <- NULL
genZTestChurnData$Assigned.Bundle        <- NULL
pioneerTestChurnData$Assigned.Bundle     <- NULL
youngAdultsTestChurnData$Assigned.Bundle <- NULL
averageTestChurnData$ProbChurn     <- predict(model.average, newx=as.matrix(averageTestChurnData[,     !names(averageTestChurnData)     %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
familyTestChurnData$ProbChurn      <- predict(model.family,  newx=as.matrix(familyTestChurnData[,      !names(familyTestChurnData)      %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
fliersTestChurnData$ProbChurn      <- predict(model.fliers,  newx=as.matrix(fliersTestChurnData[,      !names(fliersTestChurnData)      %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
genZTestChurnData$ProbChurn        <- predict(model.genz,    newx=as.matrix(genZTestChurnData[,        !names(genZTestChurnData)        %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
pioneerTestChurnData$ProbChurn     <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[,     !names(pioneerTestChurnData)     %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
youngAdultsTestChurnData$ProbChurn <- predict(model.adults,  newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
churnThreshold   <- 0.8
churnAvg         <- averageTestChurnData[averageTestChurnData$ProbChurn         > churnThreshold, ]
churnFamily      <- familyTestChurnData[familyTestChurnData$ProbChurn           > churnThreshold, ]
churnFliers      <- fliersTestChurnData[fliersTestChurnData$ProbChurn           > churnThreshold, ]
churnGenZ        <- genZTestChurnData[genZTestChurnData$ProbChurn               > churnThreshold, ]
churnPioneer     <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn         > churnThreshold, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > churnThreshold, ]
# Combine the subsets into 1 dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
averageTestChurnData$ProbChurn      <- NULL
familyTestChurnData$ProbChurn       <- NULL
fliersTestChurnData$ProbChurn       <- NULL
genZTestChurnData$ProbChurn         <- NULL
pioneerTestChurnData$ProbChurn      <- NULL
youngAdultsTestChurnData$ProbChurn  <- NULL
averageTestChurnData$customerID     <- NULL
familyTestChurnData$customerID      <- NULL
fliersTestChurnData$customerID      <- NULL
genZTestChurnData$customerID        <- NULL
pioneerTestChurnData$customerID     <- NULL
youngAdultsTestChurnData$customerID <- NULL
# evaluate model accuracy
preds         <- predict(model.average, newx=as.matrix(averageTestChurnData[, !names(averageTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[1] <- mean(preds==averageTestChurnData$Churn) # accuracy
preds         <- predict(model.family, newx=as.matrix(familyTestChurnData[, !names(familyTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[2] <- mean(preds==familyTestChurnData$Churn) # accuracy
preds         <- predict(model.fliers, newx=as.matrix(fliersTestChurnData[, !names(fliersTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[3] <- mean(preds==fliersTestChurnData$Churn) # accuracy
preds         <- predict(model.genz, newx=as.matrix(genZTestChurnData[, !names(genZTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[4] <- mean(preds==genZTestChurnData$Churn) # accuracy
preds         <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[, !names(pioneerTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[5] <- mean(preds==pioneerTestChurnData$Churn) # accuracy
preds         <- predict(model.adults, newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[6] <- mean(preds==youngAdultsTestChurnData$Churn) # accuracy
data.table(models, accuracies)
# simulate deployment
# for customers facing high probability of churn, we fit their data into the other 5 models & recommend optimal bundle
combined.matrix <- as.matrix(combinedChurnOnly[, !names(combinedChurnOnly) %in% c('customerID', 'Churn', 'ProbChurn')])
combinedChurnOnly$average <- predict(model.average, newx=combined.matrix, type='response')
combinedChurnOnly$family  <- predict(model.family,  newx=combined.matrix, type='response')
combinedChurnOnly$fliers  <- predict(model.fliers,  newx=combined.matrix, type='response')
combinedChurnOnly$genz    <- predict(model.genz,    newx=combined.matrix, type='response')
combinedChurnOnly$pioneer <- predict(model.pioneer, newx=combined.matrix, type='response')
combinedChurnOnly$adults  <- predict(model.adults,  newx=combined.matrix, type='response')
combinedChurnOnlyProbs <- combinedChurnOnly[, c('average', 'family', 'fliers', 'genz', 'pioneer', 'adults')]
combinedChurnOnlyProbs$recomm <- apply(combinedChurnOnlyProbs, 1, function(x) {
names(combinedChurnOnlyProbs)[which.min(x)]
})
combinedChurnOnlyFinal <- cbind(combinedChurnOnly[, c('customerID', 'ProbChurn')], combinedChurnOnlyProbs)
table(combinedChurnOnlyFinal$recomm)
rfModelAvg <- randomForest(Churn ~ ., data = averageTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
averageTestChurnData$ProbChurn <- predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[, 2] * 100
rfModelAvg.predict <- predict(rfModelAvg, newdata = averageTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(averageTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelAvg)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelAvg)
varImpPlot(rfModelAvg)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict, averageTestChurnData$Churn)
rfModelAvg.accuracy <- mean(averageTestChurnData$Churn == rfModelAvg.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelAvg.accuracy * 100, "%.\n")
# +---------------------+
# |    Family bundle    |
# +---------------------+
# Fit the Random Forest Model to Predict Churn
rfModelFamily <- randomForest(Churn ~ ., data = familyTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
familyTestChurnData$ProbChurn <- predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[, 2] * 100
rfModelFamily.predict <- predict(rfModelFamily, newdata = familyTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(familyTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFamily)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFamily)
varImpPlot(rfModelFamily)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict, familyTestChurnData$Churn)
rfModelFamily.accuracy <- mean(familyTestChurnData$Churn == rfModelFamily.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFamily.accuracy * 100, "%.\n")
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
# Fit the Random Forest Model to Predict Churn
rfModelFliers <- randomForest(Churn ~ ., data = fliersTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
fliersTestChurnData$ProbChurn <- predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[, 2] * 100
rfModelFliers.predict <- predict(rfModelFliers, newdata = fliersTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(fliersTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFliers)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFliers)
varImpPlot(rfModelFliers)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict, fliersTestChurnData$Churn)
rfModelFliers.accuracy <- mean(fliersTestChurnData$Churn == rfModelFliers.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFliers.accuracy * 100, "%.\n")
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
# Fit the Random Forest Model to Predict Churn
rfModelGenZ <- randomForest(Churn ~ ., data = genZTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
genZTestChurnData$ProbChurn <- predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[, 2] * 100
rfModelGenZ.predict <- predict(rfModelGenZ, newdata = genZTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(genZTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelGenZ)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelGenZ)
varImpPlot(rfModelGenZ)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict, genZTestChurnData$Churn)
rfModelGenZ.accuracy <- mean(genZTestChurnData$Churn == rfModelGenZ.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelGenZ.accuracy * 100, "%.\n")
# +--------------------------+
# |    Pioneer generation    |
# +--------------------------+
# Fit the Random Forest Model to Predict Churn
rfModelPioneer <- randomForest(Churn ~ ., data = pioneerTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
pioneerTestChurnData$ProbChurn <- predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[, 2] * 100
rfModelPioneer.predict <- predict(rfModelPioneer, newdata = pioneerTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(pioneerTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelPioneer)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelPioneer)
varImpPlot(rfModelPioneer)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict, pioneerTestChurnData$Churn)
rfModelPioneer.accuracy <- mean(pioneerTestChurnData$Churn == rfModelPioneer.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelPioneer.accuracy * 100, "%.\n")
# +------------------+
# |   Young Adults   |
# +------------------+
# Fit the Random Forest Model to Predict Churn
rfModelYoungAdults <- randomForest(Churn ~ ., data = youngAdultsTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
youngAdultsTestChurnData$ProbChurn <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[, 2] * 100
rfModelYoungAdults.predict <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(youngAdultsTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelYoungAdults)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelYoungAdults)
varImpPlot(rfModelYoungAdults)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict, youngAdultsTestChurnData$Churn)
rfModelYoungAdults.accuracy <- mean(youngAdultsTestChurnData$Churn == rfModelYoungAdults.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelYoungAdults.accuracy * 100, "%.\n")
# Determine the Number of People whose Churn Probs > 80%
rfModelAvg.numChurn <- length(averageTestChurnData$ProbChurn[averageTestChurnData$ProbChurn > 80])
rfModelAvg.size <- nrow(averageTestChurnData)
rfModelAvg.percentageChurn <- (rfModelAvg.numChurn/rfModelAvg.size) * 100
rfModelFamily.numChurn <- length(familyTestChurnData$ProbChurn[familyTestChurnData$ProbChurn > 80])
rfModelFamily.size <- nrow(familyTestChurnData)
rfModelFamily.percentageChurn <- (rfModelFamily.numChurn/rfModelFamily.size) * 100
rfModelFliers.numChurn <- length(fliersTestChurnData$ProbChurn[fliersTestChurnData$ProbChurn > 80])
rfModelFliers.size <- nrow(fliersTestChurnData)
rfModelFliers.percentageChurn <- (rfModelFliers.numChurn/rfModelFliers.size) * 100
rfModelGenZ.numChurn <- length(genZTestChurnData$ProbChurn[genZTestChurnData$ProbChurn > 80])
rfModelGenZ.size <- nrow(genZTestChurnData)
rfModelGenZ.percentageChurn <- (rfModelGenZ.numChurn/rfModelGenZ.size) * 100
rfModelPioneer.numChurn <- length(pioneerTestChurnData$ProbChurn[pioneerTestChurnData$ProbChurn > 80])
rfModelPioneer.size <- nrow(pioneerTestChurnData)
rfModelPioneer.percentageChurn <- (rfModelPioneer.numChurn/rfModelPioneer.size) * 100
rfModelYoungAdults.numChurn <- length(youngAdultsTestChurnData$ProbChurn[youngAdultsTestChurnData$ProbChurn > 80])
rfModelYoungAdults.size <- nrow(unique(youngAdultsTestChurnData))
rfModelYoungAdults.percentageChurn <- (rfModelYoungAdults.numChurn/rfModelYoungAdults.size) * 100
# Table for Accuracies
modelNames <- c('rfModelAvg', 'rfModelFamily', 'rfModelFliers', 'rfModelGenZ', 'rfModelPioneer', 'rfModelYoungAdults')
modelAccuracies <- c(rfModelAvg.accuracy, rfModelFamily.accuracy, rfModelFliers.accuracy, rfModelGenZ.accuracy, rfModelPioneer.accuracy, rfModelYoungAdults.accuracy)
modelChurnNums <- c(rfModelAvg.numChurn, rfModelFamily.numChurn, rfModelFliers.numChurn, rfModelGenZ.numChurn, rfModelPioneer.numChurn, rfModelYoungAdults.numChurn)
modelSize <- c(rfModelAvg.size, rfModelFamily.size, rfModelFliers.size, rfModelGenZ.size, rfModelPioneer.size, rfModelYoungAdults.size)
modelPercentage <- c(rfModelAvg.percentageChurn, rfModelFamily.percentageChurn, rfModelFliers.percentageChurn, rfModelGenZ.percentageChurn, rfModelPioneer.percentageChurn, rfModelYoungAdults.percentageChurn)
accuracyRFTable <- data.frame(Model = modelNames, Accuracy = modelAccuracies, ChurnNumbers = modelChurnNums, TestSize = modelSize, ChurnPercentage = modelPercentage)
accuracyRFTable
set.seed(123)
# +----------------------+
# |    Average bundle    |
# +----------------------+
cv <- cv.glmnet(x=as.matrix(averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')]), y=averageTrainChurnData$Churn, family='binomial', alpha=1)
model.average <- glmnet(x=averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')], y=averageTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.average)), as.vector(coef(model.average)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +---------------------+
# |    Family bundle    |
# +---------------------+
cv <- cv.glmnet(x=as.matrix(familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')]), y=familyTrainChurnData$Churn, family='binomial', alpha=1)
model.family <- glmnet(x=familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')], y=familyTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.family)), as.vector(coef(model.family)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
cv <- cv.glmnet(x=as.matrix(fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')]), y=fliersTrainChurnData$Churn, family='binomial', alpha=1)
model.fliers <- glmnet(x=fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')], y=fliersTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.fliers)), as.vector(coef(model.fliers)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
cv <- cv.glmnet(x=as.matrix(genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')]), y=genZTrainChurnData$Churn, family='binomial', alpha=1)
model.genz <- glmnet(x=genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')], y=genZTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.genz)), as.vector(coef(model.genz)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +--------------------------+
# |    Pioneer Generation    |
# +--------------------------+
cv <- cv.glmnet(x=as.matrix(pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')]), y=pioneerTrainChurnData$Churn, family='binomial', alpha=1)
model.pioneer <- glmnet(x=pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')], y=pioneerTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.pioneer)), as.vector(coef(model.pioneer)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-------------------+
# |   Young Adults    |
# +-------------------+
cv <- cv.glmnet(x=as.matrix(youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')]), y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1)
model.adults <- glmnet(x=youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')], y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
coef.df <- data.frame(rownames(coef(model.adults)), as.vector(coef(model.adults)[, 1]))
colnames(coef.df) <- c('Variable', 'Coefficient')
coef.df <- subset(coef.df, Coefficient != 0 & Variable != '(Intercept)')
coef.df <- arrange(coef.df, desc(Coefficient))
ggplot(data=coef.df, aes(x=factor(Variable, levels=Variable), y=Coefficient)) +
geom_bar(stat='identity') +
coord_flip() +
labs(title='Variable Coefficients', y='Coefficient', x='Variable')
# +-----------------------+
# |   Model Evaluation    |
# +-----------------------+
threshold  <- 0.5
accuracies <- rep(0, 6)
models     <- c('Average Bundle',
'Family Bundle',
'Frequent Fliers',
'Gen Z Streamers',
'Pioneer',
'Young Adults')
averageTestChurnData$Assigned.Bundle     <- NULL
familyTestChurnData$Assigned.Bundle      <- NULL
fliersTestChurnData$Assigned.Bundle      <- NULL
genZTestChurnData$Assigned.Bundle        <- NULL
pioneerTestChurnData$Assigned.Bundle     <- NULL
youngAdultsTestChurnData$Assigned.Bundle <- NULL
averageTestChurnData$ProbChurn     <- predict(model.average, newx=as.matrix(averageTestChurnData[,     !names(averageTestChurnData)     %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
familyTestChurnData$ProbChurn      <- predict(model.family,  newx=as.matrix(familyTestChurnData[,      !names(familyTestChurnData)      %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
fliersTestChurnData$ProbChurn      <- predict(model.fliers,  newx=as.matrix(fliersTestChurnData[,      !names(fliersTestChurnData)      %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
genZTestChurnData$ProbChurn        <- predict(model.genz,    newx=as.matrix(genZTestChurnData[,        !names(genZTestChurnData)        %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
pioneerTestChurnData$ProbChurn     <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[,     !names(pioneerTestChurnData)     %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
youngAdultsTestChurnData$ProbChurn <- predict(model.adults,  newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
churnThreshold   <- 0.8
churnAvg         <- averageTestChurnData[averageTestChurnData$ProbChurn         > churnThreshold, ]
churnFamily      <- familyTestChurnData[familyTestChurnData$ProbChurn           > churnThreshold, ]
churnFliers      <- fliersTestChurnData[fliersTestChurnData$ProbChurn           > churnThreshold, ]
churnGenZ        <- genZTestChurnData[genZTestChurnData$ProbChurn               > churnThreshold, ]
churnPioneer     <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn         > churnThreshold, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > churnThreshold, ]
# Combine the subsets into 1 dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
averageTestChurnData$ProbChurn      <- NULL
familyTestChurnData$ProbChurn       <- NULL
fliersTestChurnData$ProbChurn       <- NULL
genZTestChurnData$ProbChurn         <- NULL
pioneerTestChurnData$ProbChurn      <- NULL
youngAdultsTestChurnData$ProbChurn  <- NULL
averageTestChurnData$customerID     <- NULL
familyTestChurnData$customerID      <- NULL
fliersTestChurnData$customerID      <- NULL
genZTestChurnData$customerID        <- NULL
pioneerTestChurnData$customerID     <- NULL
youngAdultsTestChurnData$customerID <- NULL
# evaluate model accuracy
preds         <- predict(model.average, newx=as.matrix(averageTestChurnData[, !names(averageTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[1] <- mean(preds==averageTestChurnData$Churn) # accuracy
preds         <- predict(model.family, newx=as.matrix(familyTestChurnData[, !names(familyTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[2] <- mean(preds==familyTestChurnData$Churn) # accuracy
preds         <- predict(model.fliers, newx=as.matrix(fliersTestChurnData[, !names(fliersTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[3] <- mean(preds==fliersTestChurnData$Churn) # accuracy
preds         <- predict(model.genz, newx=as.matrix(genZTestChurnData[, !names(genZTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[4] <- mean(preds==genZTestChurnData$Churn) # accuracy
preds         <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[, !names(pioneerTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[5] <- mean(preds==pioneerTestChurnData$Churn) # accuracy
preds         <- predict(model.adults, newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn')]), type='response')
preds         <- ifelse(preds < threshold, 0, 1)
accuracies[6] <- mean(preds==youngAdultsTestChurnData$Churn) # accuracy
data.table(models, accuracies)
# simulate deployment
# for customers facing high probability of churn, we fit their data into the other 5 models & recommend optimal bundle
combined.matrix <- as.matrix(combinedChurnOnly[, !names(combinedChurnOnly) %in% c('customerID', 'Churn', 'ProbChurn')])
combinedChurnOnly$average <- predict(model.average, newx=combined.matrix, type='response')
combinedChurnOnly$family  <- predict(model.family,  newx=combined.matrix, type='response')
combinedChurnOnly$fliers  <- predict(model.fliers,  newx=combined.matrix, type='response')
combinedChurnOnly$genz    <- predict(model.genz,    newx=combined.matrix, type='response')
combinedChurnOnly$pioneer <- predict(model.pioneer, newx=combined.matrix, type='response')
combinedChurnOnly$adults  <- predict(model.adults,  newx=combined.matrix, type='response')
combinedChurnOnlyProbs <- combinedChurnOnly[, c('average', 'family', 'fliers', 'genz', 'pioneer', 'adults')]
combinedChurnOnlyProbs$recomm <- apply(combinedChurnOnlyProbs, 1, function(x) {
names(combinedChurnOnlyProbs)[which.min(x)]
})
combinedChurnOnlyFinal <- cbind(combinedChurnOnly[, c('customerID', 'ProbChurn')], combinedChurnOnlyProbs)
table(combinedChurnOnlyFinal$recomm)
