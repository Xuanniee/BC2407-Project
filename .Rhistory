library(Hmisc)
library(data.table)
library(ggplot2)
library(dplyr)
library(caret)
library(nnet)
library(randomForest)
# Importing of Data
setwd("C:/Users/Siah Wee Hung/Desktop/BC2407-Project")
churnData <- read.csv("telecom_customer_churn.csv", stringsAsFactors = TRUE, na.strings = c('NULL'))
#################################################### Data Cleaning Phase ##########################################################################
#churnData$City <- factor(churnData$City)
churnData$Number.of.Dependents <- factor(churnData$Number.of.Dependents)
# Dropping Variables that are not relevant for our analysis
churnData$Customer.ID <- NULL
churnData$Latitude <- NULL
churnData$Longitude <- NULL
churnData$City <- NULL
churnData$Zip.Code <- NULL
## Convert all Whitespaces into NA
churnData[churnData==""] <- NA
## NA Values
sum(is.na(churnData))
# Check the Variables that have Missing Values
churnDataVariables <- colnames(churnData) # list of column names
numVars = length(churnDataVariables)
varTable <- matrix(nrow = numVars, ncol = 1, byrow = FALSE)
colnames(varTable) <- c("Number of Missing Values") # set column name
rownames(varTable) <- churnDataVariables
# Populate the Table with Missing Values
for (index in 1:numVars){
# Fill in the Variable & Missing Values
# varTable[index, 1] <- sum(is.na(churnData[,get(names(churnData)[index])]))
varTable[index, 1] <- sum(is.na(churnData[churnDataVariables[index]]))
}
# Determine the Variables with Missing Values
varTable
# View the statistical spread and various point statistics for missing variables
summary(churnData)
## 1. Impute Avg.Monthly.Long.Distance.Charges
# According to Data Dictionary, 0 if not subscribed to Home Phone
churnData$Avg.Monthly.Long.Distance.Charges[churnData$Phone.Service == "No"] <- 0
# # Determine the Mean of Long Distance Charges, not removing NA, just not including in mean calculation
# longDistChargesMean <- mean(churnData$Avg.Monthly.Long.Distance.Charges, na.rm = TRUE)
# # Impute Long Distance Charges
# churnData$Avg.Monthly.Long.Distance.Charges <- replace(churnData$Avg.Monthly.Long.Distance.Charges,
#                                                        is.na(churnData$Avg.Monthly.Long.Distance.Charges),
#                                                        longDistChargesMean)
# Ensure Missing Values are imputed
sum(is.na(churnData$Avg.Monthly.Long.Distance.Charges))
## 2. Impute Avg.Monthly.GB.Download
# 0 if not subscribed to Internet Plan
churnData$Avg.Monthly.GB.Download[churnData$Internet.Service == "No"] <- 0
# Determine the Median of Avg Monthly Download
# avgMthDownloadMedian <- median(churnData$Avg.Monthly.GB.Download, na.rm = TRUE)
# # Impute Downloads with Median
# churnData$Avg.Monthly.GB.Download <- replace(churnData$Avg.Monthly.GB.Download,
#                                              is.na(churnData$Avg.Monthly.GB.Download),
#                                              avgMthDownloadMedian)
# Ensure no more Missing Value
sum(is.na(churnData$Avg.Monthly.GB.Download))
## 3. Impute Churn.Category
# Increase the Number of Factors to allow for Different Factors
# --------------------------
# why dont we just drop those that don't churn?
# --------------------------
levels(churnData$Churn.Category) <- c(levels(churnData$Churn.Category), "Staying Customer")
levels(churnData$Churn.Category) <- c(levels(churnData$Churn.Category), "New Customer")
# The high missing values in Churn.Category and Churn.Reason can be attributed to New & Loyal Customers
churnData$Churn.Category[churnData$Customer.Status == "Stayed"] <- "Staying Customer"
churnData$Churn.Category[churnData$Customer.Status == "Joined"] <- "New Customer"
# Determine the True Number of Missing for Churn.Category
sum(is.na(churnData$Churn.Category))
# Drop unused Factor Levels in Churn.Category
churnData$Churn.Category <- droplevels(churnData$Churn.Category)
## 4. Impute Churn.Reason
# Fixing the Factor Labels for Churn.Reason
levels(churnData$Churn.Reason) <- c(levels(churnData$Churn.Reason), "Staying Customer", "New Customer")
# Rationale for Missing Values is identical to Churn.Category
churnData$Churn.Reason[churnData$Customer.Status == "Stayed"] <- "Staying Customer"
churnData$Churn.Reason[churnData$Customer.Status == "Joined"] <- "New Customer"
# Ensure no more Missing Values
sum(is.na(churnData$Churn.Reason))
# Drop the Empty String Factor
churnData$Churn.Reason <- droplevels(churnData$Churn.Reason)
## 5. Impute Internet.Type
# Data appears to be missing for Consumers who did not subscribe to Internet
levels(churnData$Internet.Type) <- c(levels(churnData$Internet.Type), "No Internet Service")
churnData$Internet.Type[churnData$Internet.Service == "No"] <- "No Internet Service"
churnData$Internet.Type <- droplevels(churnData$Internet.Type)
# No Missing Values Check
sum(is.na(churnData$Internet.Type))
## 6. Impute Online.Security {Security Service Provided by Company}
# Missing Values appears to be for the same reason as Type, no Internet
levels(churnData$Online.Security) <- c(levels(churnData$Online.Security), "No Internet Service")
churnData$Online.Security[churnData$Internet.Service == "No"] <- "No Internet Service"
# Verify Missing Values
sum(is.na(churnData$Online.Security))
churnData$Online.Security <- droplevels(churnData$Online.Security)
## 7. Impute Online.Backup
# No Internet
levels(churnData$Online.Backup) <- c(levels(churnData$Online.Backup), "No Internet Service")
churnData$Online.Backup[churnData$Internet.Service == "No"] <- "No Internet Service"
# Verify Missing Values
sum(is.na(churnData$Online.Backup))
churnData$Online.Backup <- droplevels(churnData$Online.Backup)
## 8. Impute Device Protection Plan {For Internet Equipment}
# No Internet
levels(churnData$Device.Protection.Plan) <- c(levels(churnData$Device.Protection.Plan), "No Internet Equipment")
churnData$Device.Protection.Plan[churnData$Internet.Service == "No"] <- "No Internet Equipment"
# Verify Missing Values
sum(is.na(churnData$Device.Protection.Plan))
churnData$Device.Protection.Plan <- droplevels(churnData$Device.Protection.Plan)
## 9. Impute Premium Technical Support
# {According to Data Dict, No if not subscribed to Internet Service}
churnData$Premium.Tech.Support[churnData$Internet.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Premium.Tech.Support))
churnData$Premium.Tech.Support <- droplevels(churnData$Premium.Tech.Support)
# 10. Streaming TV
churnData$Streaming.TV[churnData$Internet.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Streaming.TV))
churnData$Streaming.TV <- droplevels(churnData$Streaming.TV)
# 11. Streaming Movies
churnData$Streaming.Movies[churnData$Internet.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Streaming.Movies))
churnData$Streaming.Movies <- droplevels(churnData$Streaming.Movies)
# 12. Streaming Music
churnData$Streaming.Music[churnData$Internet.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Streaming.Music))
churnData$Streaming.Music <- droplevels(churnData$Streaming.Music)
## 13. Impute Unlimited Data
# Unlimited Data for Internet Plan, so No if Not Subscribed
churnData$Unlimited.Data[churnData$Internet.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Unlimited.Data))
churnData$Unlimited.Data <- droplevels(churnData$Unlimited.Data)
## 14. Impute Multiple.Lines
# According to Data Dictionary, will be No if not subscribed to Home Phone Service.
churnData$Multiple.Lines[churnData$Phone.Service == "No"] <- "No"
# Verify Missing Values
sum(is.na(churnData$Multiple.Lines))
churnData$Multiple.Lines <- droplevels(churnData$Multiple.Lines)
# Verify no more Missing for entire dataset
sum(is.na(churnData))
# Remove the Whitespace in Offer A/B/C/D/E
levels(churnData$Offer) <- c(levels(churnData$Offer), "Offer.A", "Offer.B", "Offer.C", "Offer.D", "Offer.E")
churnData$Offer[churnData$Offer == "Offer A"] <- "Offer.A"
churnData$Offer[churnData$Offer == "Offer B"] <- "Offer.B"
churnData$Offer[churnData$Offer == "Offer C"] <- "Offer.C"
churnData$Offer[churnData$Offer == "Offer D"] <- "Offer.D"
churnData$Offer[churnData$Offer == "Offer E"] <- "Offer.E"
# Remove the Old Labels
churnData$Offer <- droplevels(churnData$Offer)
# Gender
ggplot(data = churnData, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_manual("Gender", values = c("Male" = "Light Blue", "Female" = "Pink")) +
labs(title = "Proportion of Customer by Gender")
# Married
ggplot(data = churnData, aes(x = Married, fill = Married)) +
geom_bar() +
scale_fill_manual("Married", values = c("No" = "Light Blue", "Yes" = "Pink")) +
labs(title = "Proportion of Customer who is Married")
# Number.of.Dependents
ggplot(data = churnData, aes(x = Number.of.Dependents, fill = Number.of.Dependents)) +
geom_bar() +
scale_fill_manual("Number.of.Dependents", values = c(rep(1:10))) +
labs(title = "Proportion of Customer by Number of Dependents")
# Offer
## Identifies the last marketing offer that the customer accepted: None, Offer A, Offer B, Offer C, Offer D, Offer E
ggplot(data = churnData, aes(x = Offer, fill = Offer)) +
geom_bar() +
scale_fill_manual("Offer", values = c("None" = "Red",
"Offer.A" = "Orange",
"Offer.B" = "Yellow",
"Offer.C" = "Green",
"Offer.D" = "Blue",
"Offer.E" = "Purple")) +
labs(title = "Proportion of Offer accepted by Customers")
# Phone.Service
## Indicates if the customer subscribes to home phone service with the company: Yes, No
ggplot(data = churnData, aes(x = Phone.Service, fill = Phone.Service)) +
geom_bar() +
scale_fill_manual("Phone.Service", values = c("No" = "Light Blue", "Yes" = "Pink")) +
labs(title = "Proportion of Customer who subscribed to Home Phone Service")
# Multiple.Lines
## Indicates if the customer subscribes to multiple telephone lines with the company: Yes, No
ggplot(data = churnData, aes(x = Multiple.Lines, fill = Multiple.Lines)) +
geom_bar() +
scale_fill_manual("Multiple.Lines", values = c("No" = "Light Blue", "Yes" = "Pink")) +
labs(title = "Proportion of Customer who are subscribed to multiple lines with the Company")
# Internet.Service
## Indicates if the customer subscribes to multiple telephone lines with the company: Yes, No
ggplot(data = churnData, aes(x = Internet.Service, fill = Internet.Service)) +
geom_bar() +
scale_fill_manual("Internet.Service", values = c("No" = "Light Blue", "Yes" = "Pink")) +
labs(title = "Proportion of Customer who subscribed to Internet Service with Company")
# Internet.Type
## Indicates the customer's type of internet connection: DSL, Fiber Optic, Cable, No Internet
ggplot(data = churnData, aes(x = Internet.Type, fill = Internet.Type)) +
geom_bar() +
scale_fill_manual("Internet.Type", values = c("No Internet Service" = "Pink",
"Cable" = "Light Blue",
"DSL" = "Yellow",
"Fiber Optic" = "Orange")) +
labs(title = "Proportion of Customer by Internet Connection Type")
# Online.Security
## Indicates if the customer subscribes to an additional online security service provided by the company
ggplot(data = churnData, aes(x = Online.Security, fill = Online.Security)) +
geom_bar() +
scale_fill_manual("Online.Security", values = c("No Internet Service" = "Pink",
"Yes" = "Light Blue",
"No" = "Yellow")) +
labs(title = "Proportion of Customer who subscribed to Security Plan")
df <- churnData
View(df)
df$Churn.Category <- NULL
df$Churn.Reason <- NULL
df$Payment.Method <- NULL
df$Paperless.Billing <- NULL
df$Offer <- NULL
df$Number.of.Referrals <- NULL
df$Male <- ifelse(df$Gender=='Male', 1, 0)
df$Gender <- NULL
df$Married <- ifelse(df$Married=='Yes', 1, 0)
df$Streaming.Movies <- ifelse(df$Streaming.Movies=='Yes', 1, 0)
df$Streaming.Music <- ifelse(df$Streaming.Music=='Yes', 1, 0)
df$Streaming.TV <- ifelse(df$Streaming.TV=='Yes', 1, 0)
df$Unlimited.Data <- ifelse(df$Unlimited.Data=='Yes', 1, 0)
df$Premium.Tech.Support <- ifelse(df$Premium.Tech.Support=='Yes', 1, 0)
df$Internet.Service <- ifelse(df$Internet.Service=='Yes', 1, 0)
df$Multiple.Lines <- ifelse(df$Multiple.Lines=='Yes', 1, 0)
df$Phone.Service <- ifelse(df$Phone.Service=='Yes', 1, 0)
str(df)
optimal.bundle <- function(row) {
row[10]
}
apply(df, 1, optimal.bundle)
str(df)
df$Assigned.Bundle <- NULL
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
quantile(churnData$Avg.Monthly.GB.Download, probs = c(0.25, 0.50, 0.75))
lowDataThreshold <- quantile(churnData$Avg.Monthly.GB.Download, probs = 0.25)
highDataThreshold <- quantile(churnData$Avg.Monthly.GB.Download, probs = 0.75)
# Setting the Threshold for Avg Monthly Long Distance Charges
quantile(churnData$Avg.Monthly.Long.Distance.Charges, probs = c(0.25, 0.50, 0.75))
lowLongDistanceThreshold <- quantile(churnData$Avg.Monthly.Long.Distance.Charges, probs = 0.25)
highLongDistanceThreshold <- quantile(churnData$Avg.Monthly.Long.Distance.Charges, probs = 0.75)
# Setting for Threshold for Extra Data Charges
## All 0, which is why we have to fall back on the earlier thresholds
quantile(churnData$Total.Extra.Data.Charges, probs = c(0.25, 0.50, 0.75))
# Setting the Threshold for Total Long Distance Charges
quantile(churnData$Total.Long.Distance.Charges, probs = c(0.25, 0.50, 0.75))
lowTotalLongDistThreshold <- quantile(churnData$Total.Long.Distance.Charges, probs = 0.25)
highTotalLongDistThreshold <- quantile(churnData$Total.Long.Distance.Charges, probs = 0.75)
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
# Pioneer Generation - Discounts due to Age
df$Assigned.Bundle[churnData$Age > 60 & df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Pioneer Generation"
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
# Pioneer Generation - Discounts due to Age
df$Assigned.Bundle[df$Age > 60 & df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Pioneer Generation"
# Family Bundle
df$Assigned.Bundle[df$Multiple.Lines == "Yes" & df$Number.of.Dependents != "0" & df$Married == "Yes"] <- "Family Bundle"
# Average Bundle - For now, if no Special Terms
df$Assigned.Bundle[is.na(df$Assigned.Bundle)] <- "Average Bundle"
df$Assigned.Bundle <- NULL
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
# Pioneer Generation - Discounts due to Age
df$Assigned.Bundle[df$Age > 60 & df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Pioneer Generation"
# Family Bundle
df$Assigned.Bundle[df$Multiple.Lines == "Yes" & df$Number.of.Dependents != "0" & df$Married == "Yes"] <- "Family Bundle"
# Gen Z
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & (df$Streaming.Movies == "Yes" | df$Streaming.Music == "Yes" | df$Streaming.TV == "Yes")] <- "Gen Z Streamers"
# Silver Surfers - Age not a Factor, no Discounts for Age
df$Assigned.Bundle[df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Silver Surfers"
# Average Bundle - For now, if no Special Terms
df$Assigned.Bundle[is.na(df$Assigned.Bundle)] <- "Average Bundle"
table(df$Assigned.Bundle)
highDataThreshold
highLongDistanceThreshold
highTotalLongDistThreshold
df$Assigned.Bundle <- NULL
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
# Pioneer Generation - Discounts due to Age
df$Assigned.Bundle[df$Age > 60 & df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Pioneer Generation"
# Family Bundle
df$Assigned.Bundle[df$Multiple.Lines == "Yes" & df$Number.of.Dependents != "0" & df$Married == "Yes"] <- "Family Bundle"
# Gen Z
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & (df$Streaming.Movies == "Yes" | df$Streaming.Music == "Yes" | df$Streaming.TV == "Yes")] <- "Gen Z Streamers"
# Silver Surfers - Age not a Factor, no Discounts for Age
df$Assigned.Bundle[df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Silver Surfers"
# Average Bundle - For now, if no Special Terms
df$Assigned.Bundle[is.na(df$Assigned.Bundle)] <- "Average Bundle"
table(df$Assigned.Bundle)
df$Assigned.Bundle <- NULL
table(df$Assigned.Bundle)
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
table(df$Assigned.Bundle)
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"]
df[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"]
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
df$Assigned.Bundle
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & df$Avg.Monthly.Long.Distance.Charges < lowLongDistanceThreshold & df$Unlimited.Data == "Yes"] <- "Young Adults"
# Pioneer Generation - Discounts due to Age
df$Assigned.Bundle[df$Age > 60 & df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Pioneer Generation"
# Family Bundle
df$Assigned.Bundle[df$Multiple.Lines == "Yes" & df$Number.of.Dependents != "0" & df$Married == "Yes"] <- "Family Bundle"
# Gen Z
df$Assigned.Bundle[df$Avg.Monthly.GB.Download > highDataThreshold & (df$Streaming.Movies == "Yes" | df$Streaming.Music == "Yes" | df$Streaming.TV == "Yes")] <- "Gen Z Streamers"
# Silver Surfers - Age not a Factor, no Discounts for Age
df$Assigned.Bundle[df$Avg.Monthly.GB.Download < lowDataThreshold & df$Avg.Monthly.Long.Distance.Charges > highLongDistanceThreshold] <- "Silver Surfers"
# Average Bundle - For now, if no Special Terms
df$Assigned.Bundle[is.na(df$Assigned.Bundle)] <- "Average Bundle"
