rfModelGenZ.percentageChurn <- (rfModelGenZ.numChurn/rfModelGenZ.size) * 100
rfModelPioneer.numChurn <- length(pioneerTestChurnData$ProbChurn[pioneerTestChurnData$ProbChurn > churnThreshold])
rfModelPioneer.size <- nrow(pioneerTestChurnData)
rfModelPioneer.percentageChurn <- (rfModelPioneer.numChurn/rfModelPioneer.size) * 100
rfModelYoungAdults.numChurn <- length(youngAdultsTestChurnData$ProbChurn[youngAdultsTestChurnData$ProbChurn > churnThreshold])
rfModelYoungAdults.size <- nrow(unique(youngAdultsTestChurnData))
rfModelYoungAdults.percentageChurn <- (rfModelYoungAdults.numChurn/rfModelYoungAdults.size) * 100
# Table for Accuracies
modelNames <- c('rfModelAvg', 'rfModelFamily', 'rfModelFliers', 'rfModelGenZ', 'rfModelPioneer', 'rfModelYoungAdults')
modelAccuracies <- c(rfModelAvg.accuracy, rfModelFamily.accuracy, rfModelFliers.accuracy, rfModelGenZ.accuracy, rfModelPioneer.accuracy, rfModelYoungAdults.accuracy)
modelChurnNums <- c(rfModelAvg.numChurn, rfModelFamily.numChurn, rfModelFliers.numChurn, rfModelGenZ.numChurn, rfModelPioneer.numChurn, rfModelYoungAdults.numChurn)
modelSize <- c(rfModelAvg.size, rfModelFamily.size, rfModelFliers.size, rfModelGenZ.size, rfModelPioneer.size, rfModelYoungAdults.size)
modelPercentage <- c(rfModelAvg.percentageChurn, rfModelFamily.percentageChurn, rfModelFliers.percentageChurn, rfModelGenZ.percentageChurn, rfModelPioneer.percentageChurn, rfModelYoungAdults.percentageChurn)
accuracyRFTable <- data.frame(Model = modelNames, Accuracy = modelAccuracies, ChurnNumbers = modelChurnNums, TestSize = modelSize, ChurnPercentage = modelPercentage)
accuracyRFTable
# Subset the People who churned from all the 6 Test Datasets
churnAvg         <- averageTestChurnData[averageTestChurnData$ProbChurn         > churnThreshold, ]
churnFamily      <- familyTestChurnData[familyTestChurnData$ProbChurn           > churnThreshold, ]
churnFliers      <- fliersTestChurnData[fliersTestChurnData$ProbChurn           > churnThreshold, ]
churnGenZ        <- genZTestChurnData[genZTestChurnData$ProbChurn               > churnThreshold, ]
churnPioneer     <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn         > churnThreshold, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > churnThreshold, ]
# Combine the Subsets into 1 Dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
## Run it for the other 5 Models
# +----------------------+
# |    Average bundle    |
# +----------------------+
predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$AverageProbChurn <- predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelAvg.predict2 <- predict(rfModelAvg, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict2, combinedChurnOnly$Churn)
rfModelAvg.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelAvg.predict2)
cat("Accuracy: ", rfModelAvg.accuracy2 * 100, "%.\n")
# +---------------------+
# |    Family bundle    |
# +---------------------+
predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FamilyProbChurn <- predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFamily.predict2 <- predict(rfModelFamily, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict2, combinedChurnOnly$Churn)
rfModelFamily.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFamily.predict2)
cat("Accuracy: ", rfModelFamily.accuracy2 * 100, "%.\n")
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FliersProbChurn <- predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFliers.predict2 <- predict(rfModelFliers, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict2, combinedChurnOnly$Churn)
rfModelFliers.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFliers.predict2)
cat("Accuracy: ", rfModelFliers.accuracy2 * 100, "%.\n")
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$GenZProbChurn <- predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelGenZ.predict2 <- predict(rfModelGenZ, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict2, combinedChurnOnly$Churn)
rfModelGenZ.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelGenZ.predict2)
cat("Accuracy: ", rfModelGenZ.accuracy2 * 100, "%.\n")
# +--------------------------+
# |    Pioneer generation    |
# +--------------------------+
predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$PioneerProbChurn <- predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelPioneer.predict2 <- predict(rfModelPioneer, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict2, combinedChurnOnly$Churn)
rfModelPioneer.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelPioneer.predict2)
cat("Accuracy: ", rfModelPioneer.accuracy2 * 100, "%.\n")
# +--------------------+
# |    Young adults    |
# +--------------------+
predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$YoungAdultsProbChurn <- predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelYoungAdults.predict2 <- predict(rfModelYoungAdults, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict2, combinedChurnOnly$Churn)
rfModelYoungAdults.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelYoungAdults.predict2)
cat("Accuracy: ", rfModelYoungAdults.accuracy2 * 100, "%.\n")
modelAccuracy2 <- c(rfModelAvg.accuracy2, rfModelFamily.accuracy2, rfModelFliers.accuracy2, rfModelGenZ.accuracy2, rfModelPioneer.accuracy2, rfModelYoungAdults.accuracy2)
subsettedCombinedChurnOnly <- subset(combinedChurnOnly, select = c("AverageProbChurn", "FamilyProbChurn", "FliersProbChurn", "GenZProbChurn", "PioneerProbChurn", "YoungAdultsProbChurn"))
# Finding Better Bundles based on lowest Churn Probs
minCol <- apply(subsettedCombinedChurnOnly, 1, function(x) {
names(subsettedCombinedChurnOnly)[which.min(x)]
})
# Add Recommendation to Table
subsettedCombinedChurnOnly$Recommended_Bundle <- minCol
subsettedCombinedChurnOnly
table(subsettedCombinedChurnOnly$Recommended_Bundle)
# Get original bundle
original.bundle <- c(rep('Average Bundle',     nrow(churnAvg)),
rep('Family Bundle',      nrow(churnFamily)),
rep('Frequent Fliers',    nrow(churnFliers)),
rep('Gen Z Streamers',    nrow(churnGenZ)),
rep('Pioneer Generation', nrow(churnPioneer)),
rep('Young Adults',       nrow(churnYoungAdults)))
# verify that number of rows match
length(original.bundle) == nrow(subsettedCombinedChurnOnly)
## Append the columns together into a new table
accuracyRFTable2 <- cbind(CustomerID = combinedChurnOnly$customerID, original.bundle, subsettedCombinedChurnOnly)
# Verify Correct Customer ID
nrow(accuracyRFTable2) == nrow(subsettedCombinedChurnOnly)
accuracyRFTable2
table(accuracyRFTable2$Recommended_Bundle)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = TRUE)
table(subsettedCombinedChurnOnly$Recommended_Bundle)
# Final data pre-processing
set.seed(4)
churnData2 <- churnData
churnData2$City <- NULL
# Remove Whitespace
names(churnData2) <- make.names(names(churnData2))
churnData2$Churn <- ifelse(churnData2$Customer.Status=='Churned', 1, 0) # stayed / joined -> 0, churned -> 1. Churn is our label.
customerID <- churnData2$Customer.ID # store customer ID first so we can re-attach in the final test dataframe
# prevent look-ahead bias
churnData2$Customer.Status     <- NULL
churnData2$Churn.Category      <- NULL
churnData2$Churn.Reason        <- NULL
churnData2$Customer.ID         <- NULL
# irrelevant
churnData2$Offer               <- NULL
churnData2$Payment.Method      <- NULL
churnData2$Paperless.Billing   <- NULL
churnData2$Number.of.Referrals <- NULL
# 2-factor to binary
churnData2$Male                 <- ifelse(churnData2$Gender=='Male', 1, 0) # change from "Gender" to "Male" for better readibility
churnData2$Gender               <- NULL # drop "Gender" since we have new column "Male"
churnData2$Married              <- ifelse(churnData2$Married             =='Yes', 1, 0)
churnData2$Streaming.Movies     <- ifelse(churnData2$Streaming.Movies    =='Yes', 1, 0)
churnData2$Streaming.Music      <- ifelse(churnData2$Streaming.Music     =='Yes', 1, 0)
churnData2$Streaming.TV         <- ifelse(churnData2$Streaming.TV        =='Yes', 1, 0)
churnData2$Unlimited.Data       <- ifelse(churnData2$Unlimited.Data      =='Yes', 1, 0)
churnData2$Premium.Tech.Support <- ifelse(churnData2$Premium.Tech.Support=='Yes', 1, 0)
churnData2$Internet.Service     <- ifelse(churnData2$Internet.Service    =='Yes', 1, 0)
churnData2$Multiple.Lines       <- ifelse(churnData2$Multiple.Lines      =='Yes', 1, 0)
churnData2$Phone.Service        <- ifelse(churnData2$Phone.Service       =='Yes', 1, 0)
# Prerequisite of SMOTE is a numeric dataset, so categorical must be converted to numbers.
# This can be done via one-hot encoding
bundles <- churnData2$Assigned.Bundle # store the Assigned.Bundle column first before removing it from the dataframe to be over sampled
churnData2.no.bundle <- churnData2[, !names(churnData2) %in% c('Assigned.Bundle')] # dataframe w/o Assigned.Bundle column so that the Assigned.Bundle column does not get encoded
# one-hot encoding
dummy <- dummyVars(" ~ .", data=churnData2.no.bundle)
churnData2 <- as.data.frame(predict(dummy, newdata=churnData2.no.bundle))
churnData2$Assigned.Bundle <- bundles # insert Assigned.Bundle back into churnData2 after one-hot encoding
names(churnData2) <- make.names(names(churnData2))
churnData2 <- cbind(customerID, churnData2)
# Train-Test Split; list = F to return a vector of indices
trainIndex <- createDataPartition(churnData2$Assigned.Bundle, p = 0.7, list = FALSE)
trainChurnData <- churnData2[trainIndex, ]
testChurnData <- churnData2[-trainIndex, ]
str(trainChurnData)
# subset train set by Assigned.Bundle
trainChurnData.average <- subset(trainChurnData, Assigned.Bundle=='Average Bundle')
trainChurnData.family  <- subset(trainChurnData, Assigned.Bundle=='Family Bundle')
trainChurnData.fliers  <- subset(trainChurnData, Assigned.Bundle=='Frequent Fliers')
trainChurnData.genz    <- subset(trainChurnData, Assigned.Bundle=='Gen Z Streamers')
trainChurnData.pioneer <- subset(trainChurnData, Assigned.Bundle=='Pioneer Generation')
trainChurnData.adults  <- subset(trainChurnData, Assigned.Bundle=='Young Adults')
# stash away customer IDs first so we can drop them during training and testing, then re-attach during demo
avgCustomerID         <- trainChurnData.average$customerID
familyCustomerID      <- trainChurnData.family$customerID
fliersCustomerID      <- trainChurnData.fliers$customerID
genzCustomerID        <- trainChurnData.genz$customerID
pioneerCustomerID     <- trainChurnData.pioneer$customerID
youngAdultsCustomerID <- trainChurnData.adults$customerID
trainChurnData.average$customerID <- NULL
trainChurnData.family$customerID  <- NULL
trainChurnData.fliers$customerID  <- NULL
trainChurnData.genz$customerID    <- NULL
trainChurnData.pioneer$customerID <- NULL
trainChurnData.adults$customerID  <- NULL
# over-sample using SMOTE
averageTrainChurnData     <- SMOTE(X=trainChurnData.average[, !names(trainChurnData.average) %in% c('Assigned.Bundle')], target=trainChurnData.average$Churn)$data
familyTrainChurnData      <- SMOTE(X=trainChurnData.family[, !names(trainChurnData.family) %in% c('Assigned.Bundle')], target=trainChurnData.family$Churn)$data
fliersTrainChurnData      <- SMOTE(X=trainChurnData.fliers[, !names(trainChurnData.fliers) %in% c('Assigned.Bundle')], target=trainChurnData.fliers$Churn)$data
genZTrainChurnData        <- SMOTE(X=trainChurnData.genz[, !names(trainChurnData.genz) %in% c('Assigned.Bundle')], target=trainChurnData.genz$Churn)$data
pioneerTrainChurnData     <- SMOTE(X=trainChurnData.pioneer[, !names(trainChurnData.pioneer) %in% c('Assigned.Bundle')], target=trainChurnData.pioneer$Churn)$data
youngAdultsTrainChurnData <- SMOTE(X=trainChurnData.adults[, !names(trainChurnData.adults) %in% c('Assigned.Bundle')], target=trainChurnData.adults$Churn)$data
# remove automatically-generated column "class" from SMOTE-ing
averageTrainChurnData$class     <- NULL
familyTrainChurnData$class      <- NULL
fliersTrainChurnData$class      <- NULL
genZTrainChurnData$class        <- NULL
pioneerTrainChurnData$class     <- NULL
youngAdultsTrainChurnData$class <- NULL
# Subset test set by Assigned.Bundle
averageTestChurnData     <- subset(testChurnData, Assigned.Bundle == "Average Bundle")
familyTestChurnData      <- subset(testChurnData, Assigned.Bundle == "Family Bundle")
fliersTestChurnData      <- subset(testChurnData, Assigned.Bundle == "Frequent Fliers")
genZTestChurnData        <- subset(testChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTestChurnData     <- subset(testChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTestChurnData <- subset(testChurnData, Assigned.Bundle == "Young Adults")
# Making Churn a Factor for RF
averageTrainChurnData$Churn     <- factor(averageTrainChurnData$Churn)
familyTrainChurnData$Churn      <- factor(familyTrainChurnData$Churn)
fliersTrainChurnData$Churn      <- factor(fliersTrainChurnData$Churn)
genZTrainChurnData$Churn        <- factor(genZTrainChurnData$Churn)
pioneerTrainChurnData$Churn     <- factor(pioneerTrainChurnData$Churn)
youngAdultsTrainChurnData$Churn <- factor(youngAdultsTrainChurnData$Churn)
averageTestChurnData$Churn      <- factor(averageTestChurnData$Churn)
familyTestChurnData$Churn       <- factor(familyTestChurnData$Churn)
fliersTestChurnData$Churn       <- factor(fliersTestChurnData$Churn)
genZTestChurnData$Churn         <- factor(genZTestChurnData$Churn)
pioneerTestChurnData$Churn      <- factor(pioneerTestChurnData$Churn)
youngAdultsTestChurnData$Churn  <- factor(youngAdultsTestChurnData$Churn)
# ||===========================================================||
# ||                                                           ||
# ||          Machine Learning Model 1: Random Forest          ||
# ||                                                           ||
# ||===========================================================||
# +----------------------+
# |    Average bundle    |
# +----------------------+
# Fit the Random Forest Model to Predict Churn
rfModelAvg <- randomForest(Churn ~ ., data = averageTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
averageTestChurnData$ProbChurn <- predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[, 2] * 100
rfModelAvg.predict <- predict(rfModelAvg, newdata = averageTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(averageTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelAvg)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelAvg)
varImpPlot(rfModelAvg)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict, averageTestChurnData$Churn)
rfModelAvg.accuracy <- mean(averageTestChurnData$Churn == rfModelAvg.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelAvg.accuracy * 100, "%.\n")
# +---------------------+
# |    Family bundle    |
# +---------------------+
# Fit the Random Forest Model to Predict Churn
rfModelFamily <- randomForest(Churn ~ ., data = familyTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
familyTestChurnData$ProbChurn <- predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[, 2] * 100
rfModelFamily.predict <- predict(rfModelFamily, newdata = familyTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(familyTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFamily)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFamily)
varImpPlot(rfModelFamily)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict, familyTestChurnData$Churn)
rfModelFamily.accuracy <- mean(familyTestChurnData$Churn == rfModelFamily.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFamily.accuracy * 100, "%.\n")
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
# Fit the Random Forest Model to Predict Churn
rfModelFliers <- randomForest(Churn ~ ., data = fliersTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
fliersTestChurnData$ProbChurn <- predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[, 2] * 100
rfModelFliers.predict <- predict(rfModelFliers, newdata = fliersTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(fliersTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFliers)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFliers)
varImpPlot(rfModelFliers)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict, fliersTestChurnData$Churn)
rfModelFliers.accuracy <- mean(fliersTestChurnData$Churn == rfModelFliers.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFliers.accuracy * 100, "%.\n")
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
# Fit the Random Forest Model to Predict Churn
rfModelGenZ <- randomForest(Churn ~ ., data = genZTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
genZTestChurnData$ProbChurn <- predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[, 2] * 100
rfModelGenZ.predict <- predict(rfModelGenZ, newdata = genZTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(genZTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelGenZ)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelGenZ)
varImpPlot(rfModelGenZ)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict, genZTestChurnData$Churn)
rfModelGenZ.accuracy <- mean(genZTestChurnData$Churn == rfModelGenZ.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelGenZ.accuracy * 100, "%.\n")
# +--------------------------+
# |    Pioneer generation    |
# +--------------------------+
# Fit the Random Forest Model to Predict Churn
rfModelPioneer <- randomForest(Churn ~ ., data = pioneerTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
pioneerTestChurnData$ProbChurn <- predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[, 2] * 100
rfModelPioneer.predict <- predict(rfModelPioneer, newdata = pioneerTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(pioneerTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelPioneer)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelPioneer)
varImpPlot(rfModelPioneer)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict, pioneerTestChurnData$Churn)
rfModelPioneer.accuracy <- mean(pioneerTestChurnData$Churn == rfModelPioneer.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelPioneer.accuracy * 100, "%.\n")
# +------------------+
# |   Young Adults   |
# +------------------+
# Fit the Random Forest Model to Predict Churn
rfModelYoungAdults <- randomForest(Churn ~ ., data = youngAdultsTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
youngAdultsTestChurnData$ProbChurn <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[, 2] * 100
rfModelYoungAdults.predict <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(youngAdultsTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelYoungAdults)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelYoungAdults)
varImpPlot(rfModelYoungAdults)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict, youngAdultsTestChurnData$Churn)
rfModelYoungAdults.accuracy <- mean(youngAdultsTestChurnData$Churn == rfModelYoungAdults.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelYoungAdults.accuracy * 100, "%.\n")
# Determine the Number of People whose Churn Probs > 80%
churnThreshold   <- 80
rfModelAvg.numChurn <- length(averageTestChurnData$ProbChurn[averageTestChurnData$ProbChurn > churnThreshold])
rfModelAvg.size <- nrow(averageTestChurnData)
rfModelAvg.percentageChurn <- (rfModelAvg.numChurn/rfModelAvg.size) * 100
rfModelFamily.numChurn <- length(familyTestChurnData$ProbChurn[familyTestChurnData$ProbChurn > churnThreshold])
rfModelFamily.size <- nrow(familyTestChurnData)
rfModelFamily.percentageChurn <- (rfModelFamily.numChurn/rfModelFamily.size) * 100
rfModelFliers.numChurn <- length(fliersTestChurnData$ProbChurn[fliersTestChurnData$ProbChurn > churnThreshold])
rfModelFliers.size <- nrow(fliersTestChurnData)
rfModelFliers.percentageChurn <- (rfModelFliers.numChurn/rfModelFliers.size) * 100
rfModelGenZ.numChurn <- length(genZTestChurnData$ProbChurn[genZTestChurnData$ProbChurn > churnThreshold])
rfModelGenZ.size <- nrow(genZTestChurnData)
rfModelGenZ.percentageChurn <- (rfModelGenZ.numChurn/rfModelGenZ.size) * 100
rfModelPioneer.numChurn <- length(pioneerTestChurnData$ProbChurn[pioneerTestChurnData$ProbChurn > churnThreshold])
rfModelPioneer.size <- nrow(pioneerTestChurnData)
rfModelPioneer.percentageChurn <- (rfModelPioneer.numChurn/rfModelPioneer.size) * 100
rfModelYoungAdults.numChurn <- length(youngAdultsTestChurnData$ProbChurn[youngAdultsTestChurnData$ProbChurn > churnThreshold])
rfModelYoungAdults.size <- nrow(unique(youngAdultsTestChurnData))
rfModelYoungAdults.percentageChurn <- (rfModelYoungAdults.numChurn/rfModelYoungAdults.size) * 100
# Table for Accuracies
modelNames <- c('rfModelAvg', 'rfModelFamily', 'rfModelFliers', 'rfModelGenZ', 'rfModelPioneer', 'rfModelYoungAdults')
modelAccuracies <- c(rfModelAvg.accuracy, rfModelFamily.accuracy, rfModelFliers.accuracy, rfModelGenZ.accuracy, rfModelPioneer.accuracy, rfModelYoungAdults.accuracy)
modelChurnNums <- c(rfModelAvg.numChurn, rfModelFamily.numChurn, rfModelFliers.numChurn, rfModelGenZ.numChurn, rfModelPioneer.numChurn, rfModelYoungAdults.numChurn)
modelSize <- c(rfModelAvg.size, rfModelFamily.size, rfModelFliers.size, rfModelGenZ.size, rfModelPioneer.size, rfModelYoungAdults.size)
modelPercentage <- c(rfModelAvg.percentageChurn, rfModelFamily.percentageChurn, rfModelFliers.percentageChurn, rfModelGenZ.percentageChurn, rfModelPioneer.percentageChurn, rfModelYoungAdults.percentageChurn)
accuracyRFTable <- data.frame(Model = modelNames, Accuracy = modelAccuracies, ChurnNumbers = modelChurnNums, TestSize = modelSize, ChurnPercentage = modelPercentage)
accuracyRFTable
# Subset the People who churned from all the 6 Test Datasets
churnAvg         <- averageTestChurnData[averageTestChurnData$ProbChurn         > churnThreshold, ]
churnFamily      <- familyTestChurnData[familyTestChurnData$ProbChurn           > churnThreshold, ]
churnFliers      <- fliersTestChurnData[fliersTestChurnData$ProbChurn           > churnThreshold, ]
churnGenZ        <- genZTestChurnData[genZTestChurnData$ProbChurn               > churnThreshold, ]
churnPioneer     <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn         > churnThreshold, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > churnThreshold, ]
# Combine the Subsets into 1 Dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
## Run it for the other 5 Models
# +----------------------+
# |    Average bundle    |
# +----------------------+
predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$AverageProbChurn <- predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelAvg.predict2 <- predict(rfModelAvg, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict2, combinedChurnOnly$Churn)
rfModelAvg.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelAvg.predict2)
cat("Accuracy: ", rfModelAvg.accuracy2 * 100, "%.\n")
# +---------------------+
# |    Family bundle    |
# +---------------------+
predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FamilyProbChurn <- predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFamily.predict2 <- predict(rfModelFamily, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict2, combinedChurnOnly$Churn)
rfModelFamily.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFamily.predict2)
cat("Accuracy: ", rfModelFamily.accuracy2 * 100, "%.\n")
# +-----------------------+
# |    Frequent fliers    |
# +-----------------------+
predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FliersProbChurn <- predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFliers.predict2 <- predict(rfModelFliers, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict2, combinedChurnOnly$Churn)
rfModelFliers.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFliers.predict2)
cat("Accuracy: ", rfModelFliers.accuracy2 * 100, "%.\n")
# +-----------------------+
# |    Gen Z streamers    |
# +-----------------------+
predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$GenZProbChurn <- predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelGenZ.predict2 <- predict(rfModelGenZ, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict2, combinedChurnOnly$Churn)
rfModelGenZ.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelGenZ.predict2)
cat("Accuracy: ", rfModelGenZ.accuracy2 * 100, "%.\n")
# +--------------------------+
# |    Pioneer generation    |
# +--------------------------+
predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$PioneerProbChurn <- predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelPioneer.predict2 <- predict(rfModelPioneer, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict2, combinedChurnOnly$Churn)
rfModelPioneer.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelPioneer.predict2)
cat("Accuracy: ", rfModelPioneer.accuracy2 * 100, "%.\n")
# +--------------------+
# |    Young adults    |
# +--------------------+
predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$YoungAdultsProbChurn <- predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelYoungAdults.predict2 <- predict(rfModelYoungAdults, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict2, combinedChurnOnly$Churn)
rfModelYoungAdults.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelYoungAdults.predict2)
cat("Accuracy: ", rfModelYoungAdults.accuracy2 * 100, "%.\n")
modelAccuracy2 <- c(rfModelAvg.accuracy2, rfModelFamily.accuracy2, rfModelFliers.accuracy2, rfModelGenZ.accuracy2, rfModelPioneer.accuracy2, rfModelYoungAdults.accuracy2)
subsettedCombinedChurnOnly <- subset(combinedChurnOnly, select = c("AverageProbChurn", "FamilyProbChurn", "FliersProbChurn", "GenZProbChurn", "PioneerProbChurn", "YoungAdultsProbChurn"))
# Finding Better Bundles based on lowest Churn Probs
minCol <- apply(subsettedCombinedChurnOnly, 1, function(x) {
names(subsettedCombinedChurnOnly)[which.min(x)]
})
# Add Recommendation to Table
subsettedCombinedChurnOnly$Recommended_Bundle <- minCol
subsettedCombinedChurnOnly
table(subsettedCombinedChurnOnly$Recommended_Bundle)
# Get original bundle
original.bundle <- c(rep('Average Bundle',     nrow(churnAvg)),
rep('Family Bundle',      nrow(churnFamily)),
rep('Frequent Fliers',    nrow(churnFliers)),
rep('Gen Z Streamers',    nrow(churnGenZ)),
rep('Pioneer Generation', nrow(churnPioneer)),
rep('Young Adults',       nrow(churnYoungAdults)))
# verify that number of rows match
length(original.bundle) == nrow(subsettedCombinedChurnOnly)
## Append the columns together into a new table
accuracyRFTable2 <- cbind(CustomerID = combinedChurnOnly$customerID, original.bundle, subsettedCombinedChurnOnly)
# Verify Correct Customer ID
nrow(accuracyRFTable2) == nrow(subsettedCombinedChurnOnly)
accuracyRFTable2
table(accuracyRFTable2$Recommended_Bundle)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = TRUE)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = FALSE)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = FALSE)
# Get original bundle
OriginalBundle <- c(rep('Average Bundle',     nrow(churnAvg)),
rep('Family Bundle',      nrow(churnFamily)),
rep('Frequent Fliers',    nrow(churnFliers)),
rep('Gen Z Streamers',    nrow(churnGenZ)),
rep('Pioneer Generation', nrow(churnPioneer)),
rep('Young Adults',       nrow(churnYoungAdults)))
# verify that number of rows match
length(OriginalBundle) == nrow(subsettedCombinedChurnOnly)
## Append the columns together into a new table
accuracyRFTable2 <- cbind(CustomerID = combinedChurnOnly$customerID, original.bundle, subsettedCombinedChurnOnly)
# Verify Correct Customer ID
nrow(accuracyRFTable2) == nrow(subsettedCombinedChurnOnly)
accuracyRFTable2
table(accuracyRFTable2$Recommended_Bundle)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = FALSE)
## Append the columns together into a new table
accuracyRFTable2 <- cbind(CustomerID = combinedChurnOnly$customerID, OriginalBundle, subsettedCombinedChurnOnly)
table(accuracyRFTable2$Recommended_Bundle)
# Export to CSV
write.csv(accuracyRFTable2, "accuracyRFTable2.csv", row.names = FALSE)
