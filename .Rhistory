trainChurnData.pioneer$customerID <- NULL
trainChurnData.adults$customerID <- NULL
# over-sample using SMOTE
trainChurnData.smote.average <- SMOTE(X=trainChurnData.average[, !names(trainChurnData.average) %in% c('Assigned.Bundle')], target=trainChurnData.average$Churn)$data
trainChurnData.smote.family  <- SMOTE(X=trainChurnData.family[, !names(trainChurnData.family) %in% c('Assigned.Bundle')], target=trainChurnData.family$Churn)$data
trainChurnData.smote.fliers  <- SMOTE(X=trainChurnData.fliers[, !names(trainChurnData.fliers) %in% c('Assigned.Bundle')], target=trainChurnData.fliers$Churn)$data
trainChurnData.smote.genz    <- SMOTE(X=trainChurnData.genz[, !names(trainChurnData.genz) %in% c('Assigned.Bundle')], target=trainChurnData.genz$Churn)$data
trainChurnData.smote.pioneer <- SMOTE(X=trainChurnData.pioneer[, !names(trainChurnData.pioneer) %in% c('Assigned.Bundle')], target=trainChurnData.pioneer$Churn)$data
trainChurnData.smote.adults  <- SMOTE(X=trainChurnData.adults[, !names(trainChurnData.adults) %in% c('Assigned.Bundle')], target=trainChurnData.adults$Churn)$data
# remove automatically-generated column "class" from SMOTE-ing
trainChurnData.smote.average$class <- NULL
trainChurnData.smote.family$class  <- NULL
trainChurnData.smote.fliers$class  <- NULL
trainChurnData.smote.genz$class    <- NULL
trainChurnData.smote.pioneer$class <- NULL
trainChurnData.smote.adults$class  <- NULL
# trainChurnData.smote.average <- cbind(avgCustomerID, trainChurnData.smote.average)
# trainChurnData.smote.family <- cbind(familyCustomerID, trainChurnData.smote.family)
# trainChurnData.smote.fliers <- cbind(fliersCustomerID, trainChurnData.smote.fliers)
# trainChurnData.smote.genz <- cbind(genzCustomerID, trainChurnData.smote.genz)
# trainChurnData.smote.pioneer <- cbind(pioneerCustomerID, trainChurnData.smote.pioneer)
# trainChurnData.smote.adults <- cbind(youngAdultsCustomerID, trainChurnData.smote.adults)
# Subset 6 Datasets for 6 Mobile Plans
## Subsetting Train Dataset
averageTrainChurnData <- trainChurnData.smote.average#subset(trainChurnData, Assigned.Bundle == "Average Bundle")
familyTrainChurnData <- trainChurnData.smote.family#subset(trainChurnData, Assigned.Bundle == "Family Bundle")
fliersTrainChurnData <- trainChurnData.smote.fliers#subset(trainChurnData, Assigned.Bundle == "Frequent Fliers")
genZTrainChurnData <- trainChurnData.smote.genz#subset(trainChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTrainChurnData <- trainChurnData.smote.pioneer#subset(trainChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTrainChurnData <- trainChurnData.smote.adults#subset(trainChurnData, Assigned.Bundle == "Young Adults")
## Subsetting Test Dataset
averageTestChurnData <- subset(testChurnData, Assigned.Bundle == "Average Bundle")
familyTestChurnData <- subset(testChurnData, Assigned.Bundle == "Family Bundle")
fliersTestChurnData <- subset(testChurnData, Assigned.Bundle == "Frequent Fliers")
genZTestChurnData <- subset(testChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTestChurnData <- subset(testChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTestChurnData <- subset(testChurnData, Assigned.Bundle == "Young Adults")
# Making Churn a Factor for RF
averageTrainChurnData$Churn <- factor(averageTrainChurnData$Churn)
familyTrainChurnData$Churn <- factor(familyTrainChurnData$Churn)
fliersTrainChurnData$Churn <- factor(fliersTrainChurnData$Churn)
genZTrainChurnData$Churn <- factor(genZTrainChurnData$Churn)
pioneerTrainChurnData$Churn <- factor(pioneerTrainChurnData$Churn)
youngAdultsTrainChurnData$Churn <- factor(youngAdultsTrainChurnData$Churn)
averageTestChurnData$Churn <- factor(averageTestChurnData$Churn)
familyTestChurnData$Churn <- factor(familyTestChurnData$Churn)
fliersTestChurnData$Churn <- factor(fliersTestChurnData$Churn)
genZTestChurnData$Churn <- factor(genZTestChurnData$Churn)
pioneerTestChurnData$Churn <- factor(pioneerTestChurnData$Churn)
youngAdultsTestChurnData$Churn <- factor(youngAdultsTestChurnData$Churn)
cv <- cv.glmnet(x=as.matrix(averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')]),  y=averageTrainChurnData$Churn, family='binomial', alpha=1)
model.average <- glmnet(x=averageTrainChurnData[, !names(averageTrainChurnData) %in% c('Churn')],  y=averageTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
cv <- cv.glmnet(x=as.matrix(familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')]),  y=familyTrainChurnData$Churn, family='binomial', alpha=1)
model.family <- glmnet(x=familyTrainChurnData[, !names(familyTrainChurnData) %in% c('Churn')],  y=familyTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
cv <- cv.glmnet(x=as.matrix(fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')]),  y=fliersTrainChurnData$Churn, family='binomial', alpha=1)
model.fliers    <- glmnet(x=fliersTrainChurnData[, !names(fliersTrainChurnData) %in% c('Churn')],  y=fliersTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
cv <- cv.glmnet(x=as.matrix(genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')]),  y=genZTrainChurnData$Churn, family='binomial', alpha=1)
model.genz    <- glmnet(x=genZTrainChurnData[, !names(genZTrainChurnData) %in% c('Churn')],  y=genZTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
cv <- cv.glmnet(x=as.matrix(pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')]),  y=pioneerTrainChurnData$Churn, family='binomial', alpha=1)
model.pioneer    <- glmnet(x=pioneerTrainChurnData[, !names(pioneerTrainChurnData) %in% c('Churn')],  y=pioneerTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
cv <- cv.glmnet(x=as.matrix(youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')]),  y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1)
model.adults    <- glmnet(x=youngAdultsTrainChurnData[, !names(youngAdultsTrainChurnData) %in% c('Churn')],  y=youngAdultsTrainChurnData$Churn, family='binomial', alpha=1, lambda=cv$lambda.1se)
# Model evaluation
threshold  <- 0.5
#nrows      <- c(nrow(df.average), nrow(df.family), nrow(df.fliers), nrow(df.genz), nrow(df.pioneer), nrow(df.adults))
models     <- c('Average Bundle', 'Family Bundle', 'Frequent Fliers', 'Gen Z Streamers', 'Pioneer', 'Young Adults')
accuracies <- rep(0, 6)
averageTestChurnData$Assigned.Bundle <- NULL
familyTestChurnData$Assigned.Bundle <- NULL
fliersTestChurnData$Assigned.Bundle <- NULL
genZTestChurnData$Assigned.Bundle <- NULL
pioneerTestChurnData$Assigned.Bundle <- NULL
youngAdultsTestChurnData$Assigned.Bundle <- NULL
averageTestChurnData$ProbChurn <- predict(model.average, newx=as.matrix(averageTestChurnData[, !names(averageTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
familyTestChurnData$ProbChurn <- predict(model.family, newx=as.matrix(familyTestChurnData[, !names(familyTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
fliersTestChurnData$ProbChurn <- predict(model.fliers, newx=as.matrix(fliersTestChurnData[, !names(fliersTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
genZTestChurnData$ProbChurn <- predict(model.genz, newx=as.matrix(genZTestChurnData[, !names(genZTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
pioneerTestChurnData$ProbChurn <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[, !names(pioneerTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
youngAdultsTestChurnData$ProbChurn <- predict(model.adults, newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn', 'customerID', 'ProbChurn')]), type='response')
churnAvg <- averageTestChurnData[averageTestChurnData$ProbChurn > .8, ]
churnFamily <- familyTestChurnData[familyTestChurnData$ProbChurn > .8, ]
churnFliers <- fliersTestChurnData[fliersTestChurnData$ProbChurn > .8, ]
churnGenZ <- genZTestChurnData[genZTestChurnData$ProbChurn > .8, ]
churnPioneer <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn > .8, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > .8, ]
# Combine the Subsets into 1 Dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
averageTestChurnData$ProbChurn <- NULL
familyTestChurnData$ProbChurn <- NULL
fliersTestChurnData$ProbChurn <- NULL
genZTestChurnData$ProbChurn <- NULL
pioneerTestChurnData$ProbChurn <- NULL
youngAdultsTestChurnData$ProbChurn <- NULL
averageTestChurnData$customerID <- NULL
familyTestChurnData$customerID <- NULL
fliersTestChurnData$customerID <- NULL
genZTestChurnData$customerID <- NULL
pioneerTestChurnData$customerID <- NULL
youngAdultsTestChurnData$customerID <- NULL
# preds <- predict(model.average, newx=as.matrix(averageTestChurnData[, !names(averageTestChurnData) %in% c('Churn')]), type='response', s=0.1)
# preds <- ifelse(preds < threshold, 0, 1)
# accuracies[1] <- mean(preds==averageTestChurnData$Churn) # accuracy
# confusionMatrix(data=factor(as.vector(preds)), reference=factor(averageTestChurnData$Churn))$table
preds <- predict(model.average, newx=as.matrix(averageTestChurnData[, !names(averageTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[1] <- mean(preds==averageTestChurnData$Churn) # accuracy
preds <- predict(model.family, newx=as.matrix(familyTestChurnData[, !names(familyTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[2] <- mean(preds==familyTestChurnData$Churn) # accuracy
preds <- predict(model.fliers, newx=as.matrix(fliersTestChurnData[, !names(fliersTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[3] <- mean(preds==fliersTestChurnData$Churn) # accuracy
preds <- predict(model.genz, newx=as.matrix(genZTestChurnData[, !names(genZTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[4] <- mean(preds==genZTestChurnData$Churn) # accuracy
preds <- predict(model.pioneer, newx=as.matrix(pioneerTestChurnData[, !names(pioneerTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[5] <- mean(preds==pioneerTestChurnData$Churn) # accuracy
preds <- predict(model.adults, newx=as.matrix(youngAdultsTestChurnData[, !names(youngAdultsTestChurnData) %in% c('Churn')]), type='response')
preds <- ifelse(preds < threshold, 0, 1)
accuracies[6] <- mean(preds==youngAdultsTestChurnData$Churn) # accuracy
# data.table(models, accuracies, nrows)
data.table(models, accuracies)
combined.matrix <- as.matrix(combinedChurnOnly[, !names(combinedChurnOnly) %in% c('customerID', 'Churn', 'ProbChurn')])
combinedChurnOnly$p.churn.average <- predict(model.average, newx=combined.matrix, type='response')
combinedChurnOnly$p.churn.family <- predict(model.family, newx=combined.matrix, type='response')
combinedChurnOnly$p.churn.fliers <- predict(model.fliers, newx=combined.matrix, type='response')
combinedChurnOnly$p.churn.genz <- predict(model.genz, newx=combined.matrix, type='response')
combinedChurnOnly$p.churn.pioneer <- predict(model.pioneer, newx=combined.matrix, type='response')
combinedChurnOnly$p.churn.adults <- predict(model.adults, newx=combined.matrix, type='response')
combinedChurnOnlySubset <- combinedChurnOnly[, c('ProbChurn', 'customerID', 'p.churn.average', 'p.churn.family', 'p.churn.fliers', 'p.churn.genz', 'p.churn.pioneer', 'p.churn.adults')]
View(combinedChurnOnly)
View(combinedChurnOnlySubset)
combinedChurnOnlySubset <- combinedChurnOnly[, c('customerID', 'ProbChurn', 'p.churn.average', 'p.churn.family', 'p.churn.fliers', 'p.churn.genz', 'p.churn.pioneer', 'p.churn.adults')]
View(combinedChurnOnlySubset)
combinedChurnOnlySubset$recomm <- apply(combinedChurnOnlySubset, 1, function(x) {
names(combinedChurnOnlySubset)[which.min(x)]
})
View(combinedChurnOnlySubset)
combinedChurnOnlySubset$recomm <- apply(combinedChurnOnlySubset, 1, function(x) {
names(combinedChurnOnlySubset)[which.min(x[, c('p.churn.average', 'p.churn.family', 'p.churn.fliers', 'p.churn.genz', 'p.churn.pioneer', 'p.churn.adults')])]
})
combinedChurnOnlyProbs <- combinedChurnOnly[, c('p.churn.average', 'p.churn.family', 'p.churn.fliers', 'p.churn.genz', 'p.churn.pioneer', 'p.churn.adults')]
combinedChurnOnlyProbs <- combinedChurnOnly[, c('p.churn.average', 'p.churn.family', 'p.churn.fliers', 'p.churn.genz', 'p.churn.pioneer', 'p.churn.adults')]
combinedChurnOnlyProbs$recomm <- apply(combinedChurnOnlyProbs, 1, function(x) {
names(combinedChurnOnlyProbs)[which.min(x)]
})
combinedChurnOnlyFinal <- cbind(combinedChurnOnly[, c('customerID', 'ProbChurn')], combinedChurnOnlyProbs)
View(combinedChurnOnlyFinal)
combinedChurnOnly$average <- predict(model.average, newx=combined.matrix, type='response')
combinedChurnOnly$family <- predict(model.family, newx=combined.matrix, type='response')
combinedChurnOnly$fliers <- predict(model.fliers, newx=combined.matrix, type='response')
combinedChurnOnly$genz <- predict(model.genz, newx=combined.matrix, type='response')
combinedChurnOnly$pioneer <- predict(model.pioneer, newx=combined.matrix, type='response')
combinedChurnOnly$adults <- predict(model.adults, newx=combined.matrix, type='response')
combinedChurnOnlyProbs <- combinedChurnOnly[, c('average', 'family', 'fliers', 'genz', 'pioneer', 'adults')]
combinedChurnOnlyProbs$recomm <- apply(combinedChurnOnlyProbs, 1, function(x) {
names(combinedChurnOnlyProbs)[which.min(x)]
})
combinedChurnOnlyFinal <- cbind(combinedChurnOnly[, c('customerID', 'ProbChurn')], combinedChurnOnlyProbs)
View(combinedChurnOnlyFinal)
combinedChurnOnlyProbs <- combinedChurnOnly[, c('average', 'family', 'fliers', 'genz', 'pioneer', 'adults')]
combinedChurnOnlyProbs$recomm <- apply(combinedChurnOnlyProbs, 1, function(x) {
names(combinedChurnOnlyProbs)[which.min(x)]
})
combinedChurnOnlyFinal <- cbind(combinedChurnOnly[, c('customerID', 'ProbChurn')], combinedChurnOnlyProbs)
View(combinedChurnOnlyFinal)
table(CombinedChurnOnlyFinal$recomm)
table(combinedChurnOnlyFinal$recomm)
churnData2 <- churnData
# Remove Whitespace
names(churnData2) <- make.names(names(churnData2))
# stayed / joined -> 0, churned -> 1. Churn is our label.
churnData2$Churn <- ifelse(churnData2$Customer.Status=='Churned', 1, 0)
# prevent look-ahead bias
churnData2$Customer.Status <- NULL
churnData2$Churn.Category  <- NULL
churnData2$Churn.Reason    <- NULL
customerID <- churnData2$Customer.ID
churnData2$Customer.ID <- NULL
# irrelevant
churnData2$Offer               <- NULL
churnData2$Payment.Method      <- NULL
churnData2$Paperless.Billing   <- NULL
churnData2$Number.of.Referrals <- NULL
# 2-factor to binary
churnData2$Male                 <- ifelse(churnData2$Gender=='Male', 1, 0) # change from "Gender" to "Male" for better readibility
churnData2$Gender               <- NULL # drop "Gender" since we have new column "Male"
churnData2$Married              <- ifelse(churnData2$Married=='Yes', 1, 0)
churnData2$Streaming.Movies     <- ifelse(churnData2$Streaming.Movies=='Yes', 1, 0)
churnData2$Streaming.Music      <- ifelse(churnData2$Streaming.Music=='Yes', 1, 0)
churnData2$Streaming.TV         <- ifelse(churnData2$Streaming.TV=='Yes', 1, 0)
churnData2$Unlimited.Data       <- ifelse(churnData2$Unlimited.Data=='Yes', 1, 0)
churnData2$Premium.Tech.Support <- ifelse(churnData2$Premium.Tech.Support=='Yes', 1, 0)
churnData2$Internet.Service     <- ifelse(churnData2$Internet.Service=='Yes', 1, 0)
churnData2$Multiple.Lines       <- ifelse(churnData2$Multiple.Lines=='Yes', 1, 0)
churnData2$Phone.Service        <- ifelse(churnData2$Phone.Service=='Yes', 1, 0)
# Prerequisite of SMOTE is a numeric dataset, so categorical must be converted to numbers.
# This can be done via one-hot encoding
bundles <- churnData2$Assigned.Bundle # store the Assigned.Bundle column first before removing it from the dataframe to be over sampled
churnData2.no.bundle <- churnData2[, !names(churnData2) %in% c('Assigned.Bundle')] # dataframe w/o Assigned.Bundle column so that the Assigned.Bundle column does not get encoded
# one-hot encoding
dummy <- dummyVars(" ~ .", data=churnData2.no.bundle)
churnData2 <- as.data.frame(predict(dummy, newdata=churnData2.no.bundle))
churnData2$Assigned.Bundle <- bundles # insert Assigned.Bundle back into churnData2 after one-hot encoding
names(churnData2) <- make.names(names(churnData2))
churnData2 <- cbind(customerID, churnData2)
# Train-Test Split; list = F to return a vector of indices
trainIndex <- createDataPartition(churnData2$Assigned.Bundle, p = 0.7, list = FALSE)
trainChurnData <- churnData2[trainIndex, ]
testChurnData <- churnData2[-trainIndex, ]
str(trainChurnData)
# subset dataset by Assigned.Bundle
trainChurnData.average <- subset(trainChurnData, Assigned.Bundle=='Average Bundle')
trainChurnData.family  <- subset(trainChurnData, Assigned.Bundle=='Family Bundle')
trainChurnData.fliers  <- subset(trainChurnData, Assigned.Bundle=='Frequent Fliers')
trainChurnData.genz    <- subset(trainChurnData, Assigned.Bundle=='Gen Z Streamers')
trainChurnData.pioneer <- subset(trainChurnData, Assigned.Bundle=='Pioneer Generation')
trainChurnData.adults  <- subset(trainChurnData, Assigned.Bundle=='Young Adults')
avgCustomerID <- trainChurnData.average$customerID
familyCustomerID <- trainChurnData.family$customerID
fliersCustomerID <- trainChurnData.fliers$customerID
genzCustomerID <- trainChurnData.genz$customerID
pioneerCustomerID <- trainChurnData.pioneer$customerID
youngAdultsCustomerID <- trainChurnData.adults$customerID
trainChurnData.average$customerID <- NULL
trainChurnData.family$customerID <- NULL
trainChurnData.fliers$customerID <- NULL
trainChurnData.genz$customerID <- NULL
trainChurnData.pioneer$customerID <- NULL
trainChurnData.adults$customerID <- NULL
# over-sample using SMOTE
trainChurnData.smote.average <- SMOTE(X=trainChurnData.average[, !names(trainChurnData.average) %in% c('Assigned.Bundle')], target=trainChurnData.average$Churn)$data
trainChurnData.smote.family  <- SMOTE(X=trainChurnData.family[, !names(trainChurnData.family) %in% c('Assigned.Bundle')], target=trainChurnData.family$Churn)$data
trainChurnData.smote.fliers  <- SMOTE(X=trainChurnData.fliers[, !names(trainChurnData.fliers) %in% c('Assigned.Bundle')], target=trainChurnData.fliers$Churn)$data
trainChurnData.smote.genz    <- SMOTE(X=trainChurnData.genz[, !names(trainChurnData.genz) %in% c('Assigned.Bundle')], target=trainChurnData.genz$Churn)$data
trainChurnData.smote.pioneer <- SMOTE(X=trainChurnData.pioneer[, !names(trainChurnData.pioneer) %in% c('Assigned.Bundle')], target=trainChurnData.pioneer$Churn)$data
trainChurnData.smote.adults  <- SMOTE(X=trainChurnData.adults[, !names(trainChurnData.adults) %in% c('Assigned.Bundle')], target=trainChurnData.adults$Churn)$data
# remove automatically-generated column "class" from SMOTE-ing
trainChurnData.smote.average$class <- NULL
trainChurnData.smote.family$class  <- NULL
trainChurnData.smote.fliers$class  <- NULL
trainChurnData.smote.genz$class    <- NULL
trainChurnData.smote.pioneer$class <- NULL
trainChurnData.smote.adults$class  <- NULL
# trainChurnData.smote.average <- cbind(avgCustomerID, trainChurnData.smote.average)
# trainChurnData.smote.family <- cbind(familyCustomerID, trainChurnData.smote.family)
# trainChurnData.smote.fliers <- cbind(fliersCustomerID, trainChurnData.smote.fliers)
# trainChurnData.smote.genz <- cbind(genzCustomerID, trainChurnData.smote.genz)
# trainChurnData.smote.pioneer <- cbind(pioneerCustomerID, trainChurnData.smote.pioneer)
# trainChurnData.smote.adults <- cbind(youngAdultsCustomerID, trainChurnData.smote.adults)
# Subset 6 Datasets for 6 Mobile Plans
## Subsetting Train Dataset
averageTrainChurnData <- trainChurnData.smote.average#subset(trainChurnData, Assigned.Bundle == "Average Bundle")
familyTrainChurnData <- trainChurnData.smote.family#subset(trainChurnData, Assigned.Bundle == "Family Bundle")
fliersTrainChurnData <- trainChurnData.smote.fliers#subset(trainChurnData, Assigned.Bundle == "Frequent Fliers")
genZTrainChurnData <- trainChurnData.smote.genz#subset(trainChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTrainChurnData <- trainChurnData.smote.pioneer#subset(trainChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTrainChurnData <- trainChurnData.smote.adults#subset(trainChurnData, Assigned.Bundle == "Young Adults")
## Subsetting Test Dataset
averageTestChurnData <- subset(testChurnData, Assigned.Bundle == "Average Bundle")
familyTestChurnData <- subset(testChurnData, Assigned.Bundle == "Family Bundle")
fliersTestChurnData <- subset(testChurnData, Assigned.Bundle == "Frequent Fliers")
genZTestChurnData <- subset(testChurnData, Assigned.Bundle == "Gen Z Streamers")
pioneerTestChurnData <- subset(testChurnData, Assigned.Bundle == "Pioneer Generation")
youngAdultsTestChurnData <- subset(testChurnData, Assigned.Bundle == "Young Adults")
# Making Churn a Factor for RF
averageTrainChurnData$Churn <- factor(averageTrainChurnData$Churn)
familyTrainChurnData$Churn <- factor(familyTrainChurnData$Churn)
fliersTrainChurnData$Churn <- factor(fliersTrainChurnData$Churn)
genZTrainChurnData$Churn <- factor(genZTrainChurnData$Churn)
pioneerTrainChurnData$Churn <- factor(pioneerTrainChurnData$Churn)
youngAdultsTrainChurnData$Churn <- factor(youngAdultsTrainChurnData$Churn)
averageTestChurnData$Churn <- factor(averageTestChurnData$Churn)
familyTestChurnData$Churn <- factor(familyTestChurnData$Churn)
fliersTestChurnData$Churn <- factor(fliersTestChurnData$Churn)
genZTestChurnData$Churn <- factor(genZTestChurnData$Churn)
pioneerTestChurnData$Churn <- factor(pioneerTestChurnData$Churn)
youngAdultsTestChurnData$Churn <- factor(youngAdultsTestChurnData$Churn)
## Random Forest ####################################################################################################################
## 1. Average Bundle RF Model
# Fit the Random Forest Model to Predict Churn
rfModelAvg <- randomForest(Churn ~ ., data = averageTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
averageTestChurnData$ProbChurn <- predict(rfModelAvg, newdata = averageTestChurnData, type = "prob")[, 2] * 100
rfModelAvg.predict <- predict(rfModelAvg, newdata = averageTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(averageTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelAvg)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelAvg)
varImpPlot(rfModelAvg)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict, averageTestChurnData$Churn)
rfModelAvg.accuracy <- mean(averageTestChurnData$Churn == rfModelAvg.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelAvg.accuracy * 100, "%.\n")
## 2. Family Bundle
# Fit the Random Forest Model to Predict Churn
rfModelFamily <- randomForest(Churn ~ ., data = familyTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
familyTestChurnData$ProbChurn <- predict(rfModelFamily, newdata = familyTestChurnData, type = "prob")[, 2] * 100
rfModelFamily.predict <- predict(rfModelFamily, newdata = familyTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(familyTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFamily)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFamily)
varImpPlot(rfModelFamily)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict, familyTestChurnData$Churn)
rfModelFamily.accuracy <- mean(familyTestChurnData$Churn == rfModelFamily.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFamily.accuracy * 100, "%.\n")
## 3. Frequent Fliers
# Fit the Random Forest Model to Predict Churn
rfModelFliers <- randomForest(Churn ~ ., data = fliersTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
fliersTestChurnData$ProbChurn <- predict(rfModelFliers, newdata = fliersTestChurnData, type = "prob")[, 2] * 100
rfModelFliers.predict <- predict(rfModelFliers, newdata = fliersTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(fliersTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelFliers)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelFliers)
varImpPlot(rfModelFliers)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict, fliersTestChurnData$Churn)
rfModelFliers.accuracy <- mean(fliersTestChurnData$Churn == rfModelFliers.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelFliers.accuracy * 100, "%.\n")
## 4. Gen Z Streamers
# Fit the Random Forest Model to Predict Churn
rfModelGenZ <- randomForest(Churn ~ ., data = genZTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
genZTestChurnData$ProbChurn <- predict(rfModelGenZ, newdata = genZTestChurnData, type = "prob")[, 2] * 100
rfModelGenZ.predict <- predict(rfModelGenZ, newdata = genZTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(genZTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelGenZ)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelGenZ)
varImpPlot(rfModelGenZ)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict, genZTestChurnData$Churn)
rfModelGenZ.accuracy <- mean(genZTestChurnData$Churn == rfModelGenZ.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelGenZ.accuracy * 100, "%.\n")
## 5. Pioneer Generation
# Fit the Random Forest Model to Predict Churn
rfModelPioneer <- randomForest(Churn ~ ., data = pioneerTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
pioneerTestChurnData$ProbChurn <- predict(rfModelPioneer, newdata = pioneerTestChurnData, type = "prob")[, 2] * 100
rfModelPioneer.predict <- predict(rfModelPioneer, newdata = pioneerTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(pioneerTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelPioneer)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelPioneer)
varImpPlot(rfModelPioneer)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict, pioneerTestChurnData$Churn)
rfModelPioneer.accuracy <- mean(pioneerTestChurnData$Churn == rfModelPioneer.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelPioneer.accuracy * 100, "%.\n")
## 6. Young Adults
# Fit the Random Forest Model to Predict Churn
rfModelYoungAdults <- randomForest(Churn ~ ., data = youngAdultsTrainChurnData, importance = TRUE,
ntree = 500, mtry = 2)
# Identify the Churn Probability
predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
youngAdultsTestChurnData$ProbChurn <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData, type = "prob")[, 2] * 100
rfModelYoungAdults.predict <- predict(rfModelYoungAdults, newdata = youngAdultsTestChurnData)
# Verify & view the probability of churning for the first 10 customers
head(select(youngAdultsTestChurnData, Churn, ProbChurn), 10)
# Results
summary(rfModelYoungAdults)
# Variable Importance of Random Forest
rf.var.impt <- importance(rfModelYoungAdults)
varImpPlot(rfModelYoungAdults)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict, youngAdultsTestChurnData$Churn)
rfModelYoungAdults.accuracy <- mean(youngAdultsTestChurnData$Churn == rfModelYoungAdults.predict)
cat("Accuracy of Random Forest (No Feature Selection)", rfModelYoungAdults.accuracy * 100, "%.\n")
# Determine the Number of People whose Churn Probs > 80%
rfModelAvg.numChurn <- length(averageTestChurnData$ProbChurn[averageTestChurnData$ProbChurn > 80])
rfModelAvg.size <- nrow(averageTestChurnData)
rfModelAvg.percentageChurn <- (rfModelAvg.numChurn/rfModelAvg.size) * 100
rfModelFamily.numChurn <- length(familyTestChurnData$ProbChurn[familyTestChurnData$ProbChurn > 80])
rfModelFamily.size <- nrow(familyTestChurnData)
rfModelFamily.percentageChurn <- (rfModelFamily.numChurn/rfModelFamily.size) * 100
rfModelFliers.numChurn <- length(fliersTestChurnData$ProbChurn[fliersTestChurnData$ProbChurn > 80])
rfModelFliers.size <- nrow(fliersTestChurnData)
rfModelFliers.percentageChurn <- (rfModelFliers.numChurn/rfModelFliers.size) * 100
rfModelGenZ.numChurn <- length(genZTestChurnData$ProbChurn[genZTestChurnData$ProbChurn > 80])
rfModelGenZ.size <- nrow(genZTestChurnData)
rfModelGenZ.percentageChurn <- (rfModelGenZ.numChurn/rfModelGenZ.size) * 100
rfModelPioneer.numChurn <- length(pioneerTestChurnData$ProbChurn[pioneerTestChurnData$ProbChurn > 80])
rfModelPioneer.size <- nrow(pioneerTestChurnData)
rfModelPioneer.percentageChurn <- (rfModelPioneer.numChurn/rfModelPioneer.size) * 100
rfModelYoungAdults.numChurn <- length(youngAdultsTestChurnData$ProbChurn[youngAdultsTestChurnData$ProbChurn > 80])
rfModelYoungAdults.size <- nrow(unique(youngAdultsTestChurnData))
rfModelYoungAdults.percentageChurn <- (rfModelYoungAdults.numChurn/rfModelYoungAdults.size) * 100
# Table for Accuracies
modelNames <- c('rfModelAvg', 'rfModelFamily', 'rfModelFliers', 'rfModelGenZ', 'rfModelPioneer', 'rfModelYoungAdults')
modelAccuracies <- c(rfModelAvg.accuracy, rfModelFamily.accuracy, rfModelFliers.accuracy, rfModelGenZ.accuracy, rfModelPioneer.accuracy, rfModelYoungAdults.accuracy)
modelChurnNums <- c(rfModelAvg.numChurn, rfModelFamily.numChurn, rfModelFliers.numChurn, rfModelGenZ.numChurn, rfModelPioneer.numChurn, rfModelYoungAdults.numChurn)
modelSize <- c(rfModelAvg.size, rfModelFamily.size, rfModelFliers.size, rfModelGenZ.size, rfModelPioneer.size, rfModelYoungAdults.size)
modelPercentage <- c(rfModelAvg.percentageChurn, rfModelFamily.percentageChurn, rfModelFliers.percentageChurn, rfModelGenZ.percentageChurn, rfModelPioneer.percentageChurn, rfModelYoungAdults.percentageChurn)
accuracyRFTable <- data.frame(Model = modelNames, Accuracy = modelAccuracies, ChurnNumbers = modelChurnNums, TestSize = modelSize, ChurnPercentage = modelPercentage)
accuracyRFTable
# Subset the People who churned from all the 6 Test Datasets
churnAvg <- averageTestChurnData[averageTestChurnData$ProbChurn > 80, ]
churnFamily <- familyTestChurnData[familyTestChurnData$ProbChurn > 80, ]
churnFliers <- fliersTestChurnData[fliersTestChurnData$ProbChurn > 80, ]
churnGenZ <- genZTestChurnData[genZTestChurnData$ProbChurn > 80, ]
churnPioneer <- pioneerTestChurnData[pioneerTestChurnData$ProbChurn > 80, ]
churnYoungAdults <- youngAdultsTestChurnData[youngAdultsTestChurnData$ProbChurn > 80, ]
# Combine the Subsets into 1 Dataset
combinedChurnOnly <- rbind(churnAvg, churnFamily, churnFliers, churnGenZ, churnPioneer, churnYoungAdults)
## Run it for the other 5 Models
# 1. Average RF
#head(select(combinedChurnOnly, Churn, AverageProbChurn), 10)
predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$AverageProbChurn <- predict(rfModelAvg, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelAvg.predict2 <- predict(rfModelAvg, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelAvg.predict2, combinedChurnOnly$Churn)
rfModelAvg.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelAvg.predict2)
cat("Accuracy: ", rfModelAvg.accuracy2 * 100, "%.\n")
# 2. Family RF
predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FamilyProbChurn <- predict(rfModelFamily, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFamily.predict2 <- predict(rfModelFamily, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFamily.predict2, combinedChurnOnly$Churn)
rfModelFamily.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFamily.predict2)
cat("Accuracy: ", rfModelFamily.accuracy2 * 100, "%.\n")
# 3. Fliers RF
predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$FliersProbChurn <- predict(rfModelFliers, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelFliers.predict2 <- predict(rfModelFliers, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelFliers.predict2, combinedChurnOnly$Churn)
rfModelFliers.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelFliers.predict2)
cat("Accuracy: ", rfModelFliers.accuracy2 * 100, "%.\n")
# 4. Gen Z
predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$GenZProbChurn <- predict(rfModelGenZ, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelGenZ.predict2 <- predict(rfModelGenZ, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelGenZ.predict2, combinedChurnOnly$Churn)
rfModelGenZ.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelGenZ.predict2)
cat("Accuracy: ", rfModelGenZ.accuracy2 * 100, "%.\n")
# 5. Pioneer
predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$PioneerProbChurn <- predict(rfModelPioneer, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelPioneer.predict2 <- predict(rfModelPioneer, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelPioneer.predict2, combinedChurnOnly$Churn)
rfModelPioneer.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelPioneer.predict2)
cat("Accuracy: ", rfModelPioneer.accuracy2 * 100, "%.\n")
# 6. Young Adults
predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[,]
# Make Predictions and Obtain the Probability of Churning
combinedChurnOnly$YoungAdultsProbChurn <- predict(rfModelYoungAdults, newdata = combinedChurnOnly, type = "prob")[, 2] * 100
rfModelYoungAdults.predict2 <- predict(rfModelYoungAdults, newdata = combinedChurnOnly)
# Evaluate Performance of Model
confusionMatrix(rfModelYoungAdults.predict2, combinedChurnOnly$Churn)
rfModelYoungAdults.accuracy2 <- mean(combinedChurnOnly$Churn == rfModelYoungAdults.predict2)
cat("Accuracy: ", rfModelYoungAdults.accuracy2 * 100, "%.\n")
modelAccuracy2 <- c(rfModelAvg.accuracy2, rfModelFamily.accuracy2, rfModelFliers.accuracy2, rfModelGenZ.accuracy2, rfModelPioneer.accuracy2, rfModelYoungAdults.accuracy2)
subsettedCombinedChurnOnly <- subset(combinedChurnOnly, select = c("AverageProbChurn", "FamilyProbChurn", "FliersProbChurn", "GenZProbChurn", "PioneerProbChurn", "YoungAdultsProbChurn"))
# Finding Better Bundles based on lowest Churn Probs
minCol <- apply(subsettedCombinedChurnOnly, 1, function(x) {
names(subsettedCombinedChurnOnly)[which.min(x)]
})
# Add Recommendation to Table
subsettedCombinedChurnOnly$Recommended_Bundle <- minCol
subsettedCombinedChurnOnly
## Append the columns together into a new table
accuracyRFTable2 <- cbind(CustomerID = combinedChurnOnly$customerID, subsettedCombinedChurnOnly)
# Verify Correct Customer ID
nrow(accuracyRFTable2)
nrow(subsettedCombinedChurnOnly)
accuracyRFTable2
View(subsettedCombinedChurnOnly)
table(subsettedCombinedChurnOnly$Recommended_Bundle)
table(combinedChurnOnlyFinal$recomm)
view(combinedChurnOnlyFinal)
View(combinedChurnOnlyFinal)
